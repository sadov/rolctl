// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"os"
	"path"
	"path/filepath"

	"github.com/sadov/rolctl/client"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	homedir "github.com/mitchellh/go-homedir"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

// debug flag indicating that cli should output debug logs
var debug bool

// config file location
var configFile string

// dry run flag
var dryRun bool

// name of the executable
var exeName string = filepath.Base(os.Args[0])

// logDebugf writes debug log to stdout
func logDebugf(format string, v ...interface{}) {
	if !debug {
		return
	}
	log.Printf(format, v...)
}

// depth of recursion to construct model flags
var maxDepth int = 5

// makeClient constructs a client object
func makeClient(cmd *cobra.Command, args []string) (*client.RolCmd, error) {
	hostname := viper.GetString("hostname")
	viper.SetDefault("base_path", client.DefaultBasePath)
	basePath := viper.GetString("base_path")
	scheme := viper.GetString("scheme")

	r := httptransport.New(hostname, basePath, []string{scheme})
	r.SetDebug(debug)
	// set custom producer and consumer to use the default ones

	r.Consumers["application/json"] = runtime.JSONConsumer()

	r.Producers["application/json"] = runtime.JSONProducer()

	appCli := client.New(r, strfmt.Default)
	logDebugf("Server url: %v://%v", scheme, hostname)
	return appCli, nil
}

// MakeRootCmd returns the root cmd
func MakeRootCmd() (*cobra.Command, error) {
	cobra.OnInitialize(initViperConfigs)

	// Use executable name as the command name
	rootCmd := &cobra.Command{
		Use: exeName,
	}

	// register basic flags
	rootCmd.PersistentFlags().String("hostname", client.DefaultHost, "hostname of the service")
	viper.BindPFlag("hostname", rootCmd.PersistentFlags().Lookup("hostname"))
	rootCmd.PersistentFlags().String("scheme", client.DefaultSchemes[0], fmt.Sprintf("Choose from: %v", client.DefaultSchemes))
	viper.BindPFlag("scheme", rootCmd.PersistentFlags().Lookup("scheme"))
	rootCmd.PersistentFlags().String("base-path", client.DefaultBasePath, fmt.Sprintf("For example: %v", client.DefaultBasePath))
	viper.BindPFlag("base_path", rootCmd.PersistentFlags().Lookup("base-path"))

	// configure debug flag
	rootCmd.PersistentFlags().BoolVar(&debug, "debug", false, "output debug logs")
	// configure config location
	rootCmd.PersistentFlags().StringVar(&configFile, "config", "", "config file path")
	// configure dry run flag
	rootCmd.PersistentFlags().BoolVar(&dryRun, "dry-run", false, "do not send the request to server")

	// register security flags
	// add all operation groups
	operationGroupDhcpCmd, err := makeOperationGroupDhcpCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupDhcpCmd)

	operationGroupEthernetSwitchCmd, err := makeOperationGroupEthernetSwitchCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupEthernetSwitchCmd)

	operationGroupHostCmd, err := makeOperationGroupHostCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupHostCmd)

	operationGroupLogCmd, err := makeOperationGroupLogCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupLogCmd)

	operationGroupTemplateCmd, err := makeOperationGroupTemplateCmd()
	if err != nil {
		return nil, err
	}
	rootCmd.AddCommand(operationGroupTemplateCmd)

	// add cobra completion
	rootCmd.AddCommand(makeGenCompletionCmd())

	return rootCmd, nil
}

// initViperConfigs initialize viper config using config file in '$HOME/.config/<cli name>/config.<json|yaml...>'
// currently hostname, scheme and auth tokens can be specified in this config file.
func initViperConfigs() {
	if configFile != "" {
		// use user specified config file location
		viper.SetConfigFile(configFile)
	} else {
		// look for default config
		// Find home directory.
		home, err := homedir.Dir()
		cobra.CheckErr(err)

		// Search config in home directory with name ".cobra" (without extension).
		viper.AddConfigPath(path.Join(home, ".config", exeName))
		viper.SetConfigName("config")
	}

	if err := viper.ReadInConfig(); err != nil {
		logDebugf("Error: loading config file: %v", err)
		return
	}
	logDebugf("Using config file: %v", viper.ConfigFileUsed())
}

func makeOperationGroupDhcpCmd() (*cobra.Command, error) {
	operationGroupDhcpCmd := &cobra.Command{
		Use:  "dhcp",
		Long: ``,
	}

	operationDeleteDhcpIDCmd, err := makeOperationDhcpDeleteDhcpIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationDeleteDhcpIDCmd)

	operationDeleteDhcpIDLeaseLeaseIDCmd, err := makeOperationDhcpDeleteDhcpIDLeaseLeaseIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationDeleteDhcpIDLeaseLeaseIDCmd)

	operationGetDhcpCmd, err := makeOperationDhcpGetDhcpCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationGetDhcpCmd)

	operationGetDhcpIDCmd, err := makeOperationDhcpGetDhcpIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationGetDhcpIDCmd)

	operationGetDhcpIDLeaseCmd, err := makeOperationDhcpGetDhcpIDLeaseCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationGetDhcpIDLeaseCmd)

	operationGetDhcpIDLeaseLeaseIDCmd, err := makeOperationDhcpGetDhcpIDLeaseLeaseIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationGetDhcpIDLeaseLeaseIDCmd)

	operationPostDhcpCmd, err := makeOperationDhcpPostDhcpCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationPostDhcpCmd)

	operationPostDhcpIDLeaseCmd, err := makeOperationDhcpPostDhcpIDLeaseCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationPostDhcpIDLeaseCmd)

	operationPutDhcpIDCmd, err := makeOperationDhcpPutDhcpIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationPutDhcpIDCmd)

	operationPutDhcpIDLeaseLeaseIDCmd, err := makeOperationDhcpPutDhcpIDLeaseLeaseIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupDhcpCmd.AddCommand(operationPutDhcpIDLeaseLeaseIDCmd)

	return operationGroupDhcpCmd, nil
}
func makeOperationGroupEthernetSwitchCmd() (*cobra.Command, error) {
	operationGroupEthernetSwitchCmd := &cobra.Command{
		Use:  "ethernet_switch",
		Long: ``,
	}

	operationDeleteEthernetSwitchIDCmd, err := makeOperationEthernetSwitchDeleteEthernetSwitchIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationDeleteEthernetSwitchIDCmd)

	operationDeleteEthernetSwitchIDPortPortIDCmd, err := makeOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationDeleteEthernetSwitchIDPortPortIDCmd)

	operationDeleteEthernetSwitchIDVlanVlanUUIDCmd, err := makeOperationEthernetSwitchDeleteEthernetSwitchIDVlanVlanUUIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationDeleteEthernetSwitchIDVlanVlanUUIDCmd)

	operationGetEthernetSwitchCmd, err := makeOperationEthernetSwitchGetEthernetSwitchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationGetEthernetSwitchCmd)

	operationGetEthernetSwitchIDCmd, err := makeOperationEthernetSwitchGetEthernetSwitchIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationGetEthernetSwitchIDCmd)

	operationGetEthernetSwitchIDPortCmd, err := makeOperationEthernetSwitchGetEthernetSwitchIDPortCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationGetEthernetSwitchIDPortCmd)

	operationGetEthernetSwitchIDPortPortIDCmd, err := makeOperationEthernetSwitchGetEthernetSwitchIDPortPortIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationGetEthernetSwitchIDPortPortIDCmd)

	operationGetEthernetSwitchIDVlanCmd, err := makeOperationEthernetSwitchGetEthernetSwitchIDVlanCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationGetEthernetSwitchIDVlanCmd)

	operationGetEthernetSwitchIDVlanVlanUUIDCmd, err := makeOperationEthernetSwitchGetEthernetSwitchIDVlanVlanUUIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationGetEthernetSwitchIDVlanVlanUUIDCmd)

	operationGetEthernetSwitchModelsCmd, err := makeOperationEthernetSwitchGetEthernetSwitchModelsCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationGetEthernetSwitchModelsCmd)

	operationPostEthernetSwitchCmd, err := makeOperationEthernetSwitchPostEthernetSwitchCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationPostEthernetSwitchCmd)

	operationPostEthernetSwitchIDPortCmd, err := makeOperationEthernetSwitchPostEthernetSwitchIDPortCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationPostEthernetSwitchIDPortCmd)

	operationPostEthernetSwitchIDVlanCmd, err := makeOperationEthernetSwitchPostEthernetSwitchIDVlanCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationPostEthernetSwitchIDVlanCmd)

	operationPutEthernetSwitchIDCmd, err := makeOperationEthernetSwitchPutEthernetSwitchIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationPutEthernetSwitchIDCmd)

	operationPutEthernetSwitchIDPortPortIDCmd, err := makeOperationEthernetSwitchPutEthernetSwitchIDPortPortIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationPutEthernetSwitchIDPortPortIDCmd)

	operationPutEthernetSwitchIDVlanVlanUUIDCmd, err := makeOperationEthernetSwitchPutEthernetSwitchIDVlanVlanUUIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupEthernetSwitchCmd.AddCommand(operationPutEthernetSwitchIDVlanVlanUUIDCmd)

	return operationGroupEthernetSwitchCmd, nil
}
func makeOperationGroupHostCmd() (*cobra.Command, error) {
	operationGroupHostCmd := &cobra.Command{
		Use:  "host",
		Long: ``,
	}

	operationDeleteHostNetworkBridgeNameCmd, err := makeOperationHostDeleteHostNetworkBridgeNameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationDeleteHostNetworkBridgeNameCmd)

	operationDeleteHostNetworkVlanNameCmd, err := makeOperationHostDeleteHostNetworkVlanNameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationDeleteHostNetworkVlanNameCmd)

	operationGetHostNetworkBridgeCmd, err := makeOperationHostGetHostNetworkBridgeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationGetHostNetworkBridgeCmd)

	operationGetHostNetworkBridgeNameCmd, err := makeOperationHostGetHostNetworkBridgeNameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationGetHostNetworkBridgeNameCmd)

	operationGetHostNetworkPingCmd, err := makeOperationHostGetHostNetworkPingCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationGetHostNetworkPingCmd)

	operationGetHostNetworkVlanCmd, err := makeOperationHostGetHostNetworkVlanCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationGetHostNetworkVlanCmd)

	operationGetHostNetworkVlanNameCmd, err := makeOperationHostGetHostNetworkVlanNameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationGetHostNetworkVlanNameCmd)

	operationPostHostNetworkBridgeCmd, err := makeOperationHostPostHostNetworkBridgeCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationPostHostNetworkBridgeCmd)

	operationPostHostNetworkVlanCmd, err := makeOperationHostPostHostNetworkVlanCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationPostHostNetworkVlanCmd)

	operationPutHostNetworkBridgeNameCmd, err := makeOperationHostPutHostNetworkBridgeNameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationPutHostNetworkBridgeNameCmd)

	operationPutHostNetworkVlanNameCmd, err := makeOperationHostPutHostNetworkVlanNameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupHostCmd.AddCommand(operationPutHostNetworkVlanNameCmd)

	return operationGroupHostCmd, nil
}
func makeOperationGroupLogCmd() (*cobra.Command, error) {
	operationGroupLogCmd := &cobra.Command{
		Use:  "log",
		Long: ``,
	}

	operationGetLogAppCmd, err := makeOperationLogGetLogAppCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogCmd.AddCommand(operationGetLogAppCmd)

	operationGetLogAppIDCmd, err := makeOperationLogGetLogAppIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogCmd.AddCommand(operationGetLogAppIDCmd)

	operationGetLogHTTPCmd, err := makeOperationLogGetLogHTTPCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogCmd.AddCommand(operationGetLogHTTPCmd)

	operationGetLogHTTPIDCmd, err := makeOperationLogGetLogHTTPIDCmd()
	if err != nil {
		return nil, err
	}
	operationGroupLogCmd.AddCommand(operationGetLogHTTPIDCmd)

	return operationGroupLogCmd, nil
}
func makeOperationGroupTemplateCmd() (*cobra.Command, error) {
	operationGroupTemplateCmd := &cobra.Command{
		Use:  "template",
		Long: ``,
	}

	operationGetTemplateDeviceCmd, err := makeOperationTemplateGetTemplateDeviceCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTemplateCmd.AddCommand(operationGetTemplateDeviceCmd)

	operationGetTemplateDeviceNameCmd, err := makeOperationTemplateGetTemplateDeviceNameCmd()
	if err != nil {
		return nil, err
	}
	operationGroupTemplateCmd.AddCommand(operationGetTemplateDeviceNameCmd)

	return operationGroupTemplateCmd, nil
}
