// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/client/ethernet_switch"

	"github.com/spf13/cobra"
)

// makeOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDCmd returns a cmd to handle operation deleteEthernetSwitchIdPortPortId
func makeOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "DeleteEthernetSwitchIDPortPortID",
		Short: ``,
		RunE:  runOperationEthernetSwitchDeleteEthernetSwitchIDPortPortID,
	}

	if err := registerOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEthernetSwitchDeleteEthernetSwitchIDPortPortID uses cmd flags to call endpoint api
func runOperationEthernetSwitchDeleteEthernetSwitchIDPortPortID(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := ethernet_switch.NewDeleteEthernetSwitchIDPortPortIDParams()
	if err, _ := retrieveOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDPortIDFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDResult(appCli.EthernetSwitch.DeleteEthernetSwitchIDPortPortID(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDParamFlags registers all flags needed to fill params
func registerOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDPortIDParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Ethernet switch ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDPortIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	portIdDescription := `Required. Ethernet switch port ID`

	var portIdFlagName string
	if cmdPrefix == "" {
		portIdFlagName = "portID"
	} else {
		portIdFlagName = fmt.Sprintf("%v.portID", cmdPrefix)
	}

	var portIdFlagDefault string

	_ = cmd.PersistentFlags().String(portIdFlagName, portIdFlagDefault, portIdDescription)

	return nil
}

func retrieveOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDIDFlag(m *ethernet_switch.DeleteEthernetSwitchIDPortPortIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDPortIDFlag(m *ethernet_switch.DeleteEthernetSwitchIDPortPortIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("portID") {

		var portIdFlagName string
		if cmdPrefix == "" {
			portIdFlagName = "portID"
		} else {
			portIdFlagName = fmt.Sprintf("%v.portID", cmdPrefix)
		}

		portIdFlagValue, err := cmd.Flags().GetString(portIdFlagName)
		if err != nil {
			return err, false
		}
		m.PortID = portIdFlagValue

	}
	return nil, retAdded
}

// parseOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDResult parses request result and return the string content
func parseOperationEthernetSwitchDeleteEthernetSwitchIDPortPortIDResult(resp0 *ethernet_switch.DeleteEthernetSwitchIDPortPortIDNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteEthernetSwitchIdPortPortIdNoContent is not supported

		// Non schema case: warning deleteEthernetSwitchIdPortPortIdNotFound is not supported

		// Non schema case: warning deleteEthernetSwitchIdPortPortIdInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response deleteEthernetSwitchIdPortPortIdNoContent is not supported by go-swagger cli yet.

	return "", nil
}
