// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/client/host"

	"github.com/spf13/cobra"
)

// makeOperationHostDeleteHostNetworkBridgeNameCmd returns a cmd to handle operation deleteHostNetworkBridgeName
func makeOperationHostDeleteHostNetworkBridgeNameCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "DeleteHostNetworkBridgeName",
		Short: ``,
		RunE:  runOperationHostDeleteHostNetworkBridgeName,
	}

	if err := registerOperationHostDeleteHostNetworkBridgeNameParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationHostDeleteHostNetworkBridgeName uses cmd flags to call endpoint api
func runOperationHostDeleteHostNetworkBridgeName(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := host.NewDeleteHostNetworkBridgeNameParams()
	if err, _ := retrieveOperationHostDeleteHostNetworkBridgeNameNameFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationHostDeleteHostNetworkBridgeNameResult(appCli.Host.DeleteHostNetworkBridgeName(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationHostDeleteHostNetworkBridgeNameParamFlags registers all flags needed to fill params
func registerOperationHostDeleteHostNetworkBridgeNameParamFlags(cmd *cobra.Command) error {
	if err := registerOperationHostDeleteHostNetworkBridgeNameNameParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationHostDeleteHostNetworkBridgeNameNameParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	nameDescription := `Required. Bridge name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func retrieveOperationHostDeleteHostNetworkBridgeNameNameFlag(m *host.DeleteHostNetworkBridgeNameParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("name") {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

	}
	return nil, retAdded
}

// parseOperationHostDeleteHostNetworkBridgeNameResult parses request result and return the string content
func parseOperationHostDeleteHostNetworkBridgeNameResult(resp0 *host.DeleteHostNetworkBridgeNameNoContent, respErr error) (string, error) {
	if respErr != nil {

		// Non schema case: warning deleteHostNetworkBridgeNameNoContent is not supported

		// Non schema case: warning deleteHostNetworkBridgeNameNotFound is not supported

		// Non schema case: warning deleteHostNetworkBridgeNameInternalServerError is not supported

		return "", respErr
	}

	// warning: non schema response deleteHostNetworkBridgeNameNoContent is not supported by go-swagger cli yet.

	return "", nil
}
