// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosDHCP4ServerCreateDto

// register flags to command
func registerModelDtosDHCP4ServerCreateDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosDHCP4ServerCreateDtoDNS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoGateway(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoInterface(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoLeaseTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoMask(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoNtp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoRange(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerCreateDtoServerID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosDHCP4ServerCreateDtoDNS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dnsDescription := `DNS servers, separated by ";"`

	var dnsFlagName string
	if cmdPrefix == "" {
		dnsFlagName = "dns"
	} else {
		dnsFlagName = fmt.Sprintf("%v.dns", cmdPrefix)
	}

	var dnsFlagDefault string

	_ = cmd.PersistentFlags().String(dnsFlagName, dnsFlagDefault, dnsDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Enabled server or no`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoGateway(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	gatewayDescription := `Gateway in ipv4 format`

	var gatewayFlagName string
	if cmdPrefix == "" {
		gatewayFlagName = "gateway"
	} else {
		gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
	}

	var gatewayFlagDefault string

	_ = cmd.PersistentFlags().String(gatewayFlagName, gatewayFlagDefault, gatewayDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoInterface(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	interfaceDescription := `Interface name`

	var interfaceFlagName string
	if cmdPrefix == "" {
		interfaceFlagName = "interface"
	} else {
		interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
	}

	var interfaceFlagDefault string

	_ = cmd.PersistentFlags().String(interfaceFlagName, interfaceFlagDefault, interfaceDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoLeaseTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	leaseTimeDescription := `LeaseTime for dhcp v4 server leases`

	var leaseTimeFlagName string
	if cmdPrefix == "" {
		leaseTimeFlagName = "leaseTime"
	} else {
		leaseTimeFlagName = fmt.Sprintf("%v.leaseTime", cmdPrefix)
	}

	var leaseTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(leaseTimeFlagName, leaseTimeFlagDefault, leaseTimeDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoMask(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	maskDescription := `Mask for dhcp leases, for example: "255.255.255.0"`

	var maskFlagName string
	if cmdPrefix == "" {
		maskFlagName = "mask"
	} else {
		maskFlagName = fmt.Sprintf("%v.mask", cmdPrefix)
	}

	var maskFlagDefault string

	_ = cmd.PersistentFlags().String(maskFlagName, maskFlagDefault, maskDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoNtp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ntpDescription := `NTP IP address or dns name of NTP server`

	var ntpFlagName string
	if cmdPrefix == "" {
		ntpFlagName = "ntp"
	} else {
		ntpFlagName = fmt.Sprintf("%v.ntp", cmdPrefix)
	}

	var ntpFlagDefault string

	_ = cmd.PersistentFlags().String(ntpFlagName, ntpFlagDefault, ntpDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `Port of DHCP server`

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoRange(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	rangeDescription := `Range of ip's for this dhcp v4 server, separated by "-", for example: "10.10.10.2-10.10.10.22"`

	var rangeFlagName string
	if cmdPrefix == "" {
		rangeFlagName = "range"
	} else {
		rangeFlagName = fmt.Sprintf("%v.range", cmdPrefix)
	}

	var rangeFlagDefault string

	_ = cmd.PersistentFlags().String(rangeFlagName, rangeFlagDefault, rangeDescription)

	return nil
}

func registerDtosDHCP4ServerCreateDtoServerID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serverIdDescription := `ServerID is a server_id dhcp option. Correct format is ipv4.`

	var serverIdFlagName string
	if cmdPrefix == "" {
		serverIdFlagName = "serverID"
	} else {
		serverIdFlagName = fmt.Sprintf("%v.serverID", cmdPrefix)
	}

	var serverIdFlagDefault string

	_ = cmd.PersistentFlags().String(serverIdFlagName, serverIdFlagDefault, serverIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosDHCP4ServerCreateDtoFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dnsAdded := retrieveDtosDHCP4ServerCreateDtoDNSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsAdded

	err, enabledAdded := retrieveDtosDHCP4ServerCreateDtoEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, gatewayAdded := retrieveDtosDHCP4ServerCreateDtoGatewayFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || gatewayAdded

	err, interfaceAdded := retrieveDtosDHCP4ServerCreateDtoInterfaceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || interfaceAdded

	err, leaseTimeAdded := retrieveDtosDHCP4ServerCreateDtoLeaseTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || leaseTimeAdded

	err, maskAdded := retrieveDtosDHCP4ServerCreateDtoMaskFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || maskAdded

	err, ntpAdded := retrieveDtosDHCP4ServerCreateDtoNtpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ntpAdded

	err, portAdded := retrieveDtosDHCP4ServerCreateDtoPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	err, rangeAdded := retrieveDtosDHCP4ServerCreateDtoRangeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || rangeAdded

	err, serverIdAdded := retrieveDtosDHCP4ServerCreateDtoServerIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serverIdAdded

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoDNSFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsFlagName := fmt.Sprintf("%v.dns", cmdPrefix)
	if cmd.Flags().Changed(dnsFlagName) {

		var dnsFlagName string
		if cmdPrefix == "" {
			dnsFlagName = "dns"
		} else {
			dnsFlagName = fmt.Sprintf("%v.dns", cmdPrefix)
		}

		dnsFlagValue, err := cmd.Flags().GetString(dnsFlagName)
		if err != nil {
			return err, false
		}
		m.DNS = dnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoEnabledFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoGatewayFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	gatewayFlagName := fmt.Sprintf("%v.gateway", cmdPrefix)
	if cmd.Flags().Changed(gatewayFlagName) {

		var gatewayFlagName string
		if cmdPrefix == "" {
			gatewayFlagName = "gateway"
		} else {
			gatewayFlagName = fmt.Sprintf("%v.gateway", cmdPrefix)
		}

		gatewayFlagValue, err := cmd.Flags().GetString(gatewayFlagName)
		if err != nil {
			return err, false
		}
		m.Gateway = gatewayFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoInterfaceFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	interfaceFlagName := fmt.Sprintf("%v.interface", cmdPrefix)
	if cmd.Flags().Changed(interfaceFlagName) {

		var interfaceFlagName string
		if cmdPrefix == "" {
			interfaceFlagName = "interface"
		} else {
			interfaceFlagName = fmt.Sprintf("%v.interface", cmdPrefix)
		}

		interfaceFlagValue, err := cmd.Flags().GetString(interfaceFlagName)
		if err != nil {
			return err, false
		}
		m.Interface = interfaceFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoLeaseTimeFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	leaseTimeFlagName := fmt.Sprintf("%v.leaseTime", cmdPrefix)
	if cmd.Flags().Changed(leaseTimeFlagName) {

		var leaseTimeFlagName string
		if cmdPrefix == "" {
			leaseTimeFlagName = "leaseTime"
		} else {
			leaseTimeFlagName = fmt.Sprintf("%v.leaseTime", cmdPrefix)
		}

		leaseTimeFlagValue, err := cmd.Flags().GetInt64(leaseTimeFlagName)
		if err != nil {
			return err, false
		}
		m.LeaseTime = leaseTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoMaskFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	maskFlagName := fmt.Sprintf("%v.mask", cmdPrefix)
	if cmd.Flags().Changed(maskFlagName) {

		var maskFlagName string
		if cmdPrefix == "" {
			maskFlagName = "mask"
		} else {
			maskFlagName = fmt.Sprintf("%v.mask", cmdPrefix)
		}

		maskFlagValue, err := cmd.Flags().GetString(maskFlagName)
		if err != nil {
			return err, false
		}
		m.Mask = maskFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoNtpFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ntpFlagName := fmt.Sprintf("%v.ntp", cmdPrefix)
	if cmd.Flags().Changed(ntpFlagName) {

		var ntpFlagName string
		if cmdPrefix == "" {
			ntpFlagName = "ntp"
		} else {
			ntpFlagName = fmt.Sprintf("%v.ntp", cmdPrefix)
		}

		ntpFlagValue, err := cmd.Flags().GetString(ntpFlagName)
		if err != nil {
			return err, false
		}
		m.Ntp = ntpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoPortFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoRangeFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	rangeFlagName := fmt.Sprintf("%v.range", cmdPrefix)
	if cmd.Flags().Changed(rangeFlagName) {

		var rangeFlagName string
		if cmdPrefix == "" {
			rangeFlagName = "range"
		} else {
			rangeFlagName = fmt.Sprintf("%v.range", cmdPrefix)
		}

		rangeFlagValue, err := cmd.Flags().GetString(rangeFlagName)
		if err != nil {
			return err, false
		}
		m.Range = rangeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerCreateDtoServerIDFlags(depth int, m *models.DtosDHCP4ServerCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serverIdFlagName := fmt.Sprintf("%v.serverID", cmdPrefix)
	if cmd.Flags().Changed(serverIdFlagName) {

		var serverIdFlagName string
		if cmdPrefix == "" {
			serverIdFlagName = "serverID"
		} else {
			serverIdFlagName = fmt.Sprintf("%v.serverID", cmdPrefix)
		}

		serverIdFlagValue, err := cmd.Flags().GetString(serverIdFlagName)
		if err != nil {
			return err, false
		}
		m.ServerID = serverIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
