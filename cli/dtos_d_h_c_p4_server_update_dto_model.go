// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosDHCP4ServerUpdateDto

// register flags to command
func registerModelDtosDHCP4ServerUpdateDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosDHCP4ServerUpdateDtoDNS(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerUpdateDtoEnabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerUpdateDtoLeaseTime(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerUpdateDtoNtp(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDHCP4ServerUpdateDtoPort(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosDHCP4ServerUpdateDtoDNS(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	dnsDescription := `DNS servers, separated by ";"`

	var dnsFlagName string
	if cmdPrefix == "" {
		dnsFlagName = "dns"
	} else {
		dnsFlagName = fmt.Sprintf("%v.dns", cmdPrefix)
	}

	var dnsFlagDefault string

	_ = cmd.PersistentFlags().String(dnsFlagName, dnsFlagDefault, dnsDescription)

	return nil
}

func registerDtosDHCP4ServerUpdateDtoEnabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	enabledDescription := `Enabled server or no`

	var enabledFlagName string
	if cmdPrefix == "" {
		enabledFlagName = "enabled"
	} else {
		enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
	}

	var enabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(enabledFlagName, enabledFlagDefault, enabledDescription)

	return nil
}

func registerDtosDHCP4ServerUpdateDtoLeaseTime(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	leaseTimeDescription := `LeaseTime for dhcp v4 server leases`

	var leaseTimeFlagName string
	if cmdPrefix == "" {
		leaseTimeFlagName = "leaseTime"
	} else {
		leaseTimeFlagName = fmt.Sprintf("%v.leaseTime", cmdPrefix)
	}

	var leaseTimeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(leaseTimeFlagName, leaseTimeFlagDefault, leaseTimeDescription)

	return nil
}

func registerDtosDHCP4ServerUpdateDtoNtp(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ntpDescription := `NTP IP address or dns name of NTP server`

	var ntpFlagName string
	if cmdPrefix == "" {
		ntpFlagName = "ntp"
	} else {
		ntpFlagName = fmt.Sprintf("%v.ntp", cmdPrefix)
	}

	var ntpFlagDefault string

	_ = cmd.PersistentFlags().String(ntpFlagName, ntpFlagDefault, ntpDescription)

	return nil
}

func registerDtosDHCP4ServerUpdateDtoPort(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	portDescription := `Port of DHCP server`

	var portFlagName string
	if cmdPrefix == "" {
		portFlagName = "port"
	} else {
		portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
	}

	var portFlagDefault int64

	_ = cmd.PersistentFlags().Int64(portFlagName, portFlagDefault, portDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosDHCP4ServerUpdateDtoFlags(depth int, m *models.DtosDHCP4ServerUpdateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, dnsAdded := retrieveDtosDHCP4ServerUpdateDtoDNSFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || dnsAdded

	err, enabledAdded := retrieveDtosDHCP4ServerUpdateDtoEnabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || enabledAdded

	err, leaseTimeAdded := retrieveDtosDHCP4ServerUpdateDtoLeaseTimeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || leaseTimeAdded

	err, ntpAdded := retrieveDtosDHCP4ServerUpdateDtoNtpFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ntpAdded

	err, portAdded := retrieveDtosDHCP4ServerUpdateDtoPortFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || portAdded

	return nil, retAdded
}

func retrieveDtosDHCP4ServerUpdateDtoDNSFlags(depth int, m *models.DtosDHCP4ServerUpdateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	dnsFlagName := fmt.Sprintf("%v.dns", cmdPrefix)
	if cmd.Flags().Changed(dnsFlagName) {

		var dnsFlagName string
		if cmdPrefix == "" {
			dnsFlagName = "dns"
		} else {
			dnsFlagName = fmt.Sprintf("%v.dns", cmdPrefix)
		}

		dnsFlagValue, err := cmd.Flags().GetString(dnsFlagName)
		if err != nil {
			return err, false
		}
		m.DNS = dnsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerUpdateDtoEnabledFlags(depth int, m *models.DtosDHCP4ServerUpdateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	enabledFlagName := fmt.Sprintf("%v.enabled", cmdPrefix)
	if cmd.Flags().Changed(enabledFlagName) {

		var enabledFlagName string
		if cmdPrefix == "" {
			enabledFlagName = "enabled"
		} else {
			enabledFlagName = fmt.Sprintf("%v.enabled", cmdPrefix)
		}

		enabledFlagValue, err := cmd.Flags().GetBool(enabledFlagName)
		if err != nil {
			return err, false
		}
		m.Enabled = enabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerUpdateDtoLeaseTimeFlags(depth int, m *models.DtosDHCP4ServerUpdateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	leaseTimeFlagName := fmt.Sprintf("%v.leaseTime", cmdPrefix)
	if cmd.Flags().Changed(leaseTimeFlagName) {

		var leaseTimeFlagName string
		if cmdPrefix == "" {
			leaseTimeFlagName = "leaseTime"
		} else {
			leaseTimeFlagName = fmt.Sprintf("%v.leaseTime", cmdPrefix)
		}

		leaseTimeFlagValue, err := cmd.Flags().GetInt64(leaseTimeFlagName)
		if err != nil {
			return err, false
		}
		m.LeaseTime = leaseTimeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerUpdateDtoNtpFlags(depth int, m *models.DtosDHCP4ServerUpdateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ntpFlagName := fmt.Sprintf("%v.ntp", cmdPrefix)
	if cmd.Flags().Changed(ntpFlagName) {

		var ntpFlagName string
		if cmdPrefix == "" {
			ntpFlagName = "ntp"
		} else {
			ntpFlagName = fmt.Sprintf("%v.ntp", cmdPrefix)
		}

		ntpFlagValue, err := cmd.Flags().GetString(ntpFlagName)
		if err != nil {
			return err, false
		}
		m.Ntp = ntpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDHCP4ServerUpdateDtoPortFlags(depth int, m *models.DtosDHCP4ServerUpdateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	portFlagName := fmt.Sprintf("%v.port", cmdPrefix)
	if cmd.Flags().Changed(portFlagName) {

		var portFlagName string
		if cmdPrefix == "" {
			portFlagName = "port"
		} else {
			portFlagName = fmt.Sprintf("%v.port", cmdPrefix)
		}

		portFlagValue, err := cmd.Flags().GetInt64(portFlagName)
		if err != nil {
			return err, false
		}
		m.Port = portFlagValue

		retAdded = true
	}

	return nil, retAdded
}
