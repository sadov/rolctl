// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosDeviceTemplateBootStageDto

// register flags to command
func registerModelDtosDeviceTemplateBootStageDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosDeviceTemplateBootStageDtoAction(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateBootStageDtoDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateBootStageDtoFiles(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateBootStageDtoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosDeviceTemplateBootStageDtoAction(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	actionDescription := `Action for this boot stage.
Can be: File, CheckPowerSwitch, EmergencyPowerOff,
PowerOff, EmergencyPowerOn, PowerOn,
CheckManagement

For File action:
	A stage can only be marked complete if all files have
	been downloaded by the device via TFTP or DHCP,
	after which the next step can be loaded.`

	var actionFlagName string
	if cmdPrefix == "" {
		actionFlagName = "action"
	} else {
		actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
	}

	var actionFlagDefault string

	_ = cmd.PersistentFlags().String(actionFlagName, actionFlagDefault, actionDescription)

	return nil
}

func registerDtosDeviceTemplateBootStageDtoDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description of boot stage template`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerDtosDeviceTemplateBootStageDtoFiles(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: files []*DtosDeviceTemplateBootStageFileDto array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosDeviceTemplateBootStageDtoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name of boot stage template`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosDeviceTemplateBootStageDtoFlags(depth int, m *models.DtosDeviceTemplateBootStageDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, actionAdded := retrieveDtosDeviceTemplateBootStageDtoActionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || actionAdded

	err, descriptionAdded := retrieveDtosDeviceTemplateBootStageDtoDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, filesAdded := retrieveDtosDeviceTemplateBootStageDtoFilesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || filesAdded

	err, nameAdded := retrieveDtosDeviceTemplateBootStageDtoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	return nil, retAdded
}

func retrieveDtosDeviceTemplateBootStageDtoActionFlags(depth int, m *models.DtosDeviceTemplateBootStageDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	actionFlagName := fmt.Sprintf("%v.action", cmdPrefix)
	if cmd.Flags().Changed(actionFlagName) {

		var actionFlagName string
		if cmdPrefix == "" {
			actionFlagName = "action"
		} else {
			actionFlagName = fmt.Sprintf("%v.action", cmdPrefix)
		}

		actionFlagValue, err := cmd.Flags().GetString(actionFlagName)
		if err != nil {
			return err, false
		}
		m.Action = actionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateBootStageDtoDescriptionFlags(depth int, m *models.DtosDeviceTemplateBootStageDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateBootStageDtoFilesFlags(depth int, m *models.DtosDeviceTemplateBootStageDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	filesFlagName := fmt.Sprintf("%v.files", cmdPrefix)
	if cmd.Flags().Changed(filesFlagName) {
		// warning: files array type []*DtosDeviceTemplateBootStageFileDto is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateBootStageDtoNameFlags(depth int, m *models.DtosDeviceTemplateBootStageDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
