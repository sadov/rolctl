// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosDeviceTemplateBootStageFileDto

// register flags to command
func registerModelDtosDeviceTemplateBootStageFileDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosDeviceTemplateBootStageFileDtoExistingFileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateBootStageFileDtoVirtualFileName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosDeviceTemplateBootStageFileDtoExistingFileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	existingFileNameDescription := `ExistingFileName file name is a real full file path with name on the disk.
This path is relative from app directory`

	var existingFileNameFlagName string
	if cmdPrefix == "" {
		existingFileNameFlagName = "existingFileName"
	} else {
		existingFileNameFlagName = fmt.Sprintf("%v.existingFileName", cmdPrefix)
	}

	var existingFileNameFlagDefault string

	_ = cmd.PersistentFlags().String(existingFileNameFlagName, existingFileNameFlagDefault, existingFileNameDescription)

	return nil
}

func registerDtosDeviceTemplateBootStageFileDtoVirtualFileName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	virtualFileNameDescription := `VirtualFileName virtual file name is relative from /<mac-address>/`

	var virtualFileNameFlagName string
	if cmdPrefix == "" {
		virtualFileNameFlagName = "virtualFileName"
	} else {
		virtualFileNameFlagName = fmt.Sprintf("%v.virtualFileName", cmdPrefix)
	}

	var virtualFileNameFlagDefault string

	_ = cmd.PersistentFlags().String(virtualFileNameFlagName, virtualFileNameFlagDefault, virtualFileNameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosDeviceTemplateBootStageFileDtoFlags(depth int, m *models.DtosDeviceTemplateBootStageFileDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, existingFileNameAdded := retrieveDtosDeviceTemplateBootStageFileDtoExistingFileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || existingFileNameAdded

	err, virtualFileNameAdded := retrieveDtosDeviceTemplateBootStageFileDtoVirtualFileNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || virtualFileNameAdded

	return nil, retAdded
}

func retrieveDtosDeviceTemplateBootStageFileDtoExistingFileNameFlags(depth int, m *models.DtosDeviceTemplateBootStageFileDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	existingFileNameFlagName := fmt.Sprintf("%v.existingFileName", cmdPrefix)
	if cmd.Flags().Changed(existingFileNameFlagName) {

		var existingFileNameFlagName string
		if cmdPrefix == "" {
			existingFileNameFlagName = "existingFileName"
		} else {
			existingFileNameFlagName = fmt.Sprintf("%v.existingFileName", cmdPrefix)
		}

		existingFileNameFlagValue, err := cmd.Flags().GetString(existingFileNameFlagName)
		if err != nil {
			return err, false
		}
		m.ExistingFileName = existingFileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateBootStageFileDtoVirtualFileNameFlags(depth int, m *models.DtosDeviceTemplateBootStageFileDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	virtualFileNameFlagName := fmt.Sprintf("%v.virtualFileName", cmdPrefix)
	if cmd.Flags().Changed(virtualFileNameFlagName) {

		var virtualFileNameFlagName string
		if cmdPrefix == "" {
			virtualFileNameFlagName = "virtualFileName"
		} else {
			virtualFileNameFlagName = fmt.Sprintf("%v.virtualFileName", cmdPrefix)
		}

		virtualFileNameFlagValue, err := cmd.Flags().GetString(virtualFileNameFlagName)
		if err != nil {
			return err, false
		}
		m.VirtualFileName = virtualFileNameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
