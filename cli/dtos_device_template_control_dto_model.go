// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosDeviceTemplateControlDto

// register flags to command
func registerModelDtosDeviceTemplateControlDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosDeviceTemplateControlDtoEmergency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateControlDtoNextBoot(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateControlDtoPower(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosDeviceTemplateControlDtoEmergency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	emergencyDescription := `Emergency how to control device power in case of emergency. As example: POE(For Rpi4), IPMI, ILO or PowerSwitch`

	var emergencyFlagName string
	if cmdPrefix == "" {
		emergencyFlagName = "emergency"
	} else {
		emergencyFlagName = fmt.Sprintf("%v.emergency", cmdPrefix)
	}

	var emergencyFlagDefault string

	_ = cmd.PersistentFlags().String(emergencyFlagName, emergencyFlagDefault, emergencyDescription)

	return nil
}

func registerDtosDeviceTemplateControlDtoNextBoot(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nextBootDescription := `NextBoot how to change next boot device. As example: IPMI, ILO or NONE.
For example, NONE is used for Rpi4, we control next boot by u-boot files in boot stages.`

	var nextBootFlagName string
	if cmdPrefix == "" {
		nextBootFlagName = "nextBoot"
	} else {
		nextBootFlagName = fmt.Sprintf("%v.nextBoot", cmdPrefix)
	}

	var nextBootFlagDefault string

	_ = cmd.PersistentFlags().String(nextBootFlagName, nextBootFlagDefault, nextBootDescription)

	return nil
}

func registerDtosDeviceTemplateControlDtoPower(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	powerDescription := `Power how to control device power. As example: POE(For Rpi4), IPMI, ILO or PowerSwitch`

	var powerFlagName string
	if cmdPrefix == "" {
		powerFlagName = "power"
	} else {
		powerFlagName = fmt.Sprintf("%v.power", cmdPrefix)
	}

	var powerFlagDefault string

	_ = cmd.PersistentFlags().String(powerFlagName, powerFlagDefault, powerDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosDeviceTemplateControlDtoFlags(depth int, m *models.DtosDeviceTemplateControlDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, emergencyAdded := retrieveDtosDeviceTemplateControlDtoEmergencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || emergencyAdded

	err, nextBootAdded := retrieveDtosDeviceTemplateControlDtoNextBootFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nextBootAdded

	err, powerAdded := retrieveDtosDeviceTemplateControlDtoPowerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || powerAdded

	return nil, retAdded
}

func retrieveDtosDeviceTemplateControlDtoEmergencyFlags(depth int, m *models.DtosDeviceTemplateControlDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	emergencyFlagName := fmt.Sprintf("%v.emergency", cmdPrefix)
	if cmd.Flags().Changed(emergencyFlagName) {

		var emergencyFlagName string
		if cmdPrefix == "" {
			emergencyFlagName = "emergency"
		} else {
			emergencyFlagName = fmt.Sprintf("%v.emergency", cmdPrefix)
		}

		emergencyFlagValue, err := cmd.Flags().GetString(emergencyFlagName)
		if err != nil {
			return err, false
		}
		m.Emergency = emergencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateControlDtoNextBootFlags(depth int, m *models.DtosDeviceTemplateControlDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nextBootFlagName := fmt.Sprintf("%v.nextBoot", cmdPrefix)
	if cmd.Flags().Changed(nextBootFlagName) {

		var nextBootFlagName string
		if cmdPrefix == "" {
			nextBootFlagName = "nextBoot"
		} else {
			nextBootFlagName = fmt.Sprintf("%v.nextBoot", cmdPrefix)
		}

		nextBootFlagValue, err := cmd.Flags().GetString(nextBootFlagName)
		if err != nil {
			return err, false
		}
		m.NextBoot = nextBootFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateControlDtoPowerFlags(depth int, m *models.DtosDeviceTemplateControlDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	powerFlagName := fmt.Sprintf("%v.power", cmdPrefix)
	if cmd.Flags().Changed(powerFlagName) {

		var powerFlagName string
		if cmdPrefix == "" {
			powerFlagName = "power"
		} else {
			powerFlagName = fmt.Sprintf("%v.power", cmdPrefix)
		}

		powerFlagValue, err := cmd.Flags().GetString(powerFlagName)
		if err != nil {
			return err, false
		}
		m.Power = powerFlagValue

		retAdded = true
	}

	return nil, retAdded
}
