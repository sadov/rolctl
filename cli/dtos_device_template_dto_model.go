// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"
	"github.com/sadov/rolctl/models"

	"github.com/spf13/cobra"
)

// Schema cli for DtosDeviceTemplateDto

// register flags to command
func registerModelDtosDeviceTemplateDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosDeviceTemplateDtoControl(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoCpucount(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoCpumodel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoDescription(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoDiscBootStages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoManufacturer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoNetBootStages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoNetworkInterfaces(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoRAM(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosDeviceTemplateDtoUsbbootStages(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosDeviceTemplateDtoControl(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var controlFlagName string
	if cmdPrefix == "" {
		controlFlagName = "control"
	} else {
		controlFlagName = fmt.Sprintf("%v.control", cmdPrefix)
	}

	if err := registerModelDtosDeviceTemplateControlDtoFlags(depth+1, controlFlagName, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosDeviceTemplateDtoCpucount(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpucountDescription := `CPUCount count of cpus`

	var cpucountFlagName string
	if cmdPrefix == "" {
		cpucountFlagName = "cpucount"
	} else {
		cpucountFlagName = fmt.Sprintf("%v.cpucount", cmdPrefix)
	}

	var cpucountFlagDefault int64

	_ = cmd.PersistentFlags().Int64(cpucountFlagName, cpucountFlagDefault, cpucountDescription)

	return nil
}

func registerDtosDeviceTemplateDtoCpumodel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpumodelDescription := `CPUModel model of cpu`

	var cpumodelFlagName string
	if cmdPrefix == "" {
		cpumodelFlagName = "cpumodel"
	} else {
		cpumodelFlagName = fmt.Sprintf("%v.cpumodel", cmdPrefix)
	}

	var cpumodelFlagDefault string

	_ = cmd.PersistentFlags().String(cpumodelFlagName, cpumodelFlagDefault, cpumodelDescription)

	return nil
}

func registerDtosDeviceTemplateDtoDescription(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	descriptionDescription := `Description template description`

	var descriptionFlagName string
	if cmdPrefix == "" {
		descriptionFlagName = "description"
	} else {
		descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
	}

	var descriptionFlagDefault string

	_ = cmd.PersistentFlags().String(descriptionFlagName, descriptionFlagDefault, descriptionDescription)

	return nil
}

func registerDtosDeviceTemplateDtoDiscBootStages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: discBootStages []*DtosDeviceTemplateBootStageDto array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosDeviceTemplateDtoManufacturer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	manufacturerDescription := `Manufacturer device manufacturer`

	var manufacturerFlagName string
	if cmdPrefix == "" {
		manufacturerFlagName = "manufacturer"
	} else {
		manufacturerFlagName = fmt.Sprintf("%v.manufacturer", cmdPrefix)
	}

	var manufacturerFlagDefault string

	_ = cmd.PersistentFlags().String(manufacturerFlagName, manufacturerFlagDefault, manufacturerDescription)

	return nil
}

func registerDtosDeviceTemplateDtoModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := `Model device model`

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	return nil
}

func registerDtosDeviceTemplateDtoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name template name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDtosDeviceTemplateDtoNetBootStages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: netBootStages []*DtosDeviceTemplateBootStageDto array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosDeviceTemplateDtoNetworkInterfaces(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: networkInterfaces []*DtosDeviceTemplateNetworkDto array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosDeviceTemplateDtoRAM(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ramDescription := `RAM the amount of RAM in GB`

	var ramFlagName string
	if cmdPrefix == "" {
		ramFlagName = "ram"
	} else {
		ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
	}

	var ramFlagDefault int64

	_ = cmd.PersistentFlags().Int64(ramFlagName, ramFlagDefault, ramDescription)

	return nil
}

func registerDtosDeviceTemplateDtoUsbbootStages(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: usbbootStages []*DtosDeviceTemplateBootStageDto array type is not supported by go-swagger cli yet

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosDeviceTemplateDtoFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, controlAdded := retrieveDtosDeviceTemplateDtoControlFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || controlAdded

	err, cpucountAdded := retrieveDtosDeviceTemplateDtoCpucountFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpucountAdded

	err, cpumodelAdded := retrieveDtosDeviceTemplateDtoCpumodelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpumodelAdded

	err, descriptionAdded := retrieveDtosDeviceTemplateDtoDescriptionFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || descriptionAdded

	err, discBootStagesAdded := retrieveDtosDeviceTemplateDtoDiscBootStagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || discBootStagesAdded

	err, manufacturerAdded := retrieveDtosDeviceTemplateDtoManufacturerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || manufacturerAdded

	err, modelAdded := retrieveDtosDeviceTemplateDtoModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	err, nameAdded := retrieveDtosDeviceTemplateDtoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, netBootStagesAdded := retrieveDtosDeviceTemplateDtoNetBootStagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || netBootStagesAdded

	err, networkInterfacesAdded := retrieveDtosDeviceTemplateDtoNetworkInterfacesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || networkInterfacesAdded

	err, ramAdded := retrieveDtosDeviceTemplateDtoRAMFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ramAdded

	err, usbbootStagesAdded := retrieveDtosDeviceTemplateDtoUsbbootStagesFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usbbootStagesAdded

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoControlFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	controlFlagName := fmt.Sprintf("%v.control", cmdPrefix)
	if cmd.Flags().Changed(controlFlagName) {
		// info: complex object control DtosDeviceTemplateControlDto is retrieved outside this Changed() block
	}
	controlFlagValue := m.Control
	if swag.IsZero(controlFlagValue) {
		controlFlagValue = &models.DtosDeviceTemplateControlDto{}
	}

	err, controlAdded := retrieveModelDtosDeviceTemplateControlDtoFlags(depth+1, controlFlagValue, controlFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || controlAdded
	if controlAdded {
		m.Control = controlFlagValue
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoCpucountFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpucountFlagName := fmt.Sprintf("%v.cpucount", cmdPrefix)
	if cmd.Flags().Changed(cpucountFlagName) {

		var cpucountFlagName string
		if cmdPrefix == "" {
			cpucountFlagName = "cpucount"
		} else {
			cpucountFlagName = fmt.Sprintf("%v.cpucount", cmdPrefix)
		}

		cpucountFlagValue, err := cmd.Flags().GetInt64(cpucountFlagName)
		if err != nil {
			return err, false
		}
		m.Cpucount = cpucountFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoCpumodelFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpumodelFlagName := fmt.Sprintf("%v.cpumodel", cmdPrefix)
	if cmd.Flags().Changed(cpumodelFlagName) {

		var cpumodelFlagName string
		if cmdPrefix == "" {
			cpumodelFlagName = "cpumodel"
		} else {
			cpumodelFlagName = fmt.Sprintf("%v.cpumodel", cmdPrefix)
		}

		cpumodelFlagValue, err := cmd.Flags().GetString(cpumodelFlagName)
		if err != nil {
			return err, false
		}
		m.Cpumodel = cpumodelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoDescriptionFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	descriptionFlagName := fmt.Sprintf("%v.description", cmdPrefix)
	if cmd.Flags().Changed(descriptionFlagName) {

		var descriptionFlagName string
		if cmdPrefix == "" {
			descriptionFlagName = "description"
		} else {
			descriptionFlagName = fmt.Sprintf("%v.description", cmdPrefix)
		}

		descriptionFlagValue, err := cmd.Flags().GetString(descriptionFlagName)
		if err != nil {
			return err, false
		}
		m.Description = descriptionFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoDiscBootStagesFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	discBootStagesFlagName := fmt.Sprintf("%v.discBootStages", cmdPrefix)
	if cmd.Flags().Changed(discBootStagesFlagName) {
		// warning: discBootStages array type []*DtosDeviceTemplateBootStageDto is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoManufacturerFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	manufacturerFlagName := fmt.Sprintf("%v.manufacturer", cmdPrefix)
	if cmd.Flags().Changed(manufacturerFlagName) {

		var manufacturerFlagName string
		if cmdPrefix == "" {
			manufacturerFlagName = "manufacturer"
		} else {
			manufacturerFlagName = fmt.Sprintf("%v.manufacturer", cmdPrefix)
		}

		manufacturerFlagValue, err := cmd.Flags().GetString(manufacturerFlagName)
		if err != nil {
			return err, false
		}
		m.Manufacturer = manufacturerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoModelFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoNameFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoNetBootStagesFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	netBootStagesFlagName := fmt.Sprintf("%v.netBootStages", cmdPrefix)
	if cmd.Flags().Changed(netBootStagesFlagName) {
		// warning: netBootStages array type []*DtosDeviceTemplateBootStageDto is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoNetworkInterfacesFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	networkInterfacesFlagName := fmt.Sprintf("%v.networkInterfaces", cmdPrefix)
	if cmd.Flags().Changed(networkInterfacesFlagName) {
		// warning: networkInterfaces array type []*DtosDeviceTemplateNetworkDto is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoRAMFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ramFlagName := fmt.Sprintf("%v.ram", cmdPrefix)
	if cmd.Flags().Changed(ramFlagName) {

		var ramFlagName string
		if cmdPrefix == "" {
			ramFlagName = "ram"
		} else {
			ramFlagName = fmt.Sprintf("%v.ram", cmdPrefix)
		}

		ramFlagValue, err := cmd.Flags().GetInt64(ramFlagName)
		if err != nil {
			return err, false
		}
		m.RAM = ramFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosDeviceTemplateDtoUsbbootStagesFlags(depth int, m *models.DtosDeviceTemplateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usbbootStagesFlagName := fmt.Sprintf("%v.usbbootStages", cmdPrefix)
	if cmd.Flags().Changed(usbbootStagesFlagName) {
		// warning: usbbootStages array type []*DtosDeviceTemplateBootStageDto is not supported by go-swagger cli yet
	}

	return nil, retAdded
}
