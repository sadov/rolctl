// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosEthernetSwitchCreateDto

// register flags to command
func registerModelDtosEthernetSwitchCreateDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosEthernetSwitchCreateDtoAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchCreateDtoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchCreateDtoPassword(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchCreateDtoSerial(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchCreateDtoSwitchModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchCreateDtoUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosEthernetSwitchCreateDtoAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := `Address - switch ip address`

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerDtosEthernetSwitchCreateDtoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name - switch name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDtosEthernetSwitchCreateDtoPassword(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	passwordDescription := `Password - ethernet switch management password`

	var passwordFlagName string
	if cmdPrefix == "" {
		passwordFlagName = "password"
	} else {
		passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
	}

	var passwordFlagDefault string

	_ = cmd.PersistentFlags().String(passwordFlagName, passwordFlagDefault, passwordDescription)

	return nil
}

func registerDtosEthernetSwitchCreateDtoSerial(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serialDescription := `Serial - switch serial number`

	var serialFlagName string
	if cmdPrefix == "" {
		serialFlagName = "serial"
	} else {
		serialFlagName = fmt.Sprintf("%v.serial", cmdPrefix)
	}

	var serialFlagDefault string

	_ = cmd.PersistentFlags().String(serialFlagName, serialFlagDefault, serialDescription)

	return nil
}

func registerDtosEthernetSwitchCreateDtoSwitchModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	switchModelDescription := `SwitchModel - switch model`

	var switchModelFlagName string
	if cmdPrefix == "" {
		switchModelFlagName = "switchModel"
	} else {
		switchModelFlagName = fmt.Sprintf("%v.switchModel", cmdPrefix)
	}

	var switchModelFlagDefault string

	_ = cmd.PersistentFlags().String(switchModelFlagName, switchModelFlagDefault, switchModelDescription)

	return nil
}

func registerDtosEthernetSwitchCreateDtoUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Username - switch admin username`

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosEthernetSwitchCreateDtoFlags(depth int, m *models.DtosEthernetSwitchCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveDtosEthernetSwitchCreateDtoAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, nameAdded := retrieveDtosEthernetSwitchCreateDtoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, passwordAdded := retrieveDtosEthernetSwitchCreateDtoPasswordFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || passwordAdded

	err, serialAdded := retrieveDtosEthernetSwitchCreateDtoSerialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serialAdded

	err, switchModelAdded := retrieveDtosEthernetSwitchCreateDtoSwitchModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || switchModelAdded

	err, usernameAdded := retrieveDtosEthernetSwitchCreateDtoUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveDtosEthernetSwitchCreateDtoAddressFlags(depth int, m *models.DtosEthernetSwitchCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchCreateDtoNameFlags(depth int, m *models.DtosEthernetSwitchCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchCreateDtoPasswordFlags(depth int, m *models.DtosEthernetSwitchCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	passwordFlagName := fmt.Sprintf("%v.password", cmdPrefix)
	if cmd.Flags().Changed(passwordFlagName) {

		var passwordFlagName string
		if cmdPrefix == "" {
			passwordFlagName = "password"
		} else {
			passwordFlagName = fmt.Sprintf("%v.password", cmdPrefix)
		}

		passwordFlagValue, err := cmd.Flags().GetString(passwordFlagName)
		if err != nil {
			return err, false
		}
		m.Password = passwordFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchCreateDtoSerialFlags(depth int, m *models.DtosEthernetSwitchCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serialFlagName := fmt.Sprintf("%v.serial", cmdPrefix)
	if cmd.Flags().Changed(serialFlagName) {

		var serialFlagName string
		if cmdPrefix == "" {
			serialFlagName = "serial"
		} else {
			serialFlagName = fmt.Sprintf("%v.serial", cmdPrefix)
		}

		serialFlagValue, err := cmd.Flags().GetString(serialFlagName)
		if err != nil {
			return err, false
		}
		m.Serial = serialFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchCreateDtoSwitchModelFlags(depth int, m *models.DtosEthernetSwitchCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	switchModelFlagName := fmt.Sprintf("%v.switchModel", cmdPrefix)
	if cmd.Flags().Changed(switchModelFlagName) {

		var switchModelFlagName string
		if cmdPrefix == "" {
			switchModelFlagName = "switchModel"
		} else {
			switchModelFlagName = fmt.Sprintf("%v.switchModel", cmdPrefix)
		}

		switchModelFlagValue, err := cmd.Flags().GetString(switchModelFlagName)
		if err != nil {
			return err, false
		}
		m.SwitchModel = switchModelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchCreateDtoUsernameFlags(depth int, m *models.DtosEthernetSwitchCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
