// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosEthernetSwitchDto

// register flags to command
func registerModelDtosEthernetSwitchDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosEthernetSwitchDtoAddress(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchDtoCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchDtoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchDtoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchDtoSerial(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchDtoSwitchModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchDtoUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchDtoUsername(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosEthernetSwitchDtoAddress(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	addressDescription := `Address - switch ip address`

	var addressFlagName string
	if cmdPrefix == "" {
		addressFlagName = "address"
	} else {
		addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
	}

	var addressFlagDefault string

	_ = cmd.PersistentFlags().String(addressFlagName, addressFlagDefault, addressDescription)

	return nil
}

func registerDtosEthernetSwitchDtoCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := `CreatedAt - entity create time`

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "createdAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerDtosEthernetSwitchDtoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `ID - unique identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerDtosEthernetSwitchDtoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name - switch name`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDtosEthernetSwitchDtoSerial(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	serialDescription := `Serial - switch serial number`

	var serialFlagName string
	if cmdPrefix == "" {
		serialFlagName = "serial"
	} else {
		serialFlagName = fmt.Sprintf("%v.serial", cmdPrefix)
	}

	var serialFlagDefault string

	_ = cmd.PersistentFlags().String(serialFlagName, serialFlagDefault, serialDescription)

	return nil
}

func registerDtosEthernetSwitchDtoSwitchModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	switchModelDescription := `SwitchModel - switch model`

	var switchModelFlagName string
	if cmdPrefix == "" {
		switchModelFlagName = "switchModel"
	} else {
		switchModelFlagName = fmt.Sprintf("%v.switchModel", cmdPrefix)
	}

	var switchModelFlagDefault string

	_ = cmd.PersistentFlags().String(switchModelFlagName, switchModelFlagDefault, switchModelDescription)

	return nil
}

func registerDtosEthernetSwitchDtoUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := `UpdatedAt - entity update time`

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

func registerDtosEthernetSwitchDtoUsername(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	usernameDescription := `Username - switch admin username`

	var usernameFlagName string
	if cmdPrefix == "" {
		usernameFlagName = "username"
	} else {
		usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
	}

	var usernameFlagDefault string

	_ = cmd.PersistentFlags().String(usernameFlagName, usernameFlagDefault, usernameDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosEthernetSwitchDtoFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, addressAdded := retrieveDtosEthernetSwitchDtoAddressFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || addressAdded

	err, createdAtAdded := retrieveDtosEthernetSwitchDtoCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, idAdded := retrieveDtosEthernetSwitchDtoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveDtosEthernetSwitchDtoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, serialAdded := retrieveDtosEthernetSwitchDtoSerialFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || serialAdded

	err, switchModelAdded := retrieveDtosEthernetSwitchDtoSwitchModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || switchModelAdded

	err, updatedAtAdded := retrieveDtosEthernetSwitchDtoUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	err, usernameAdded := retrieveDtosEthernetSwitchDtoUsernameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || usernameAdded

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoAddressFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	addressFlagName := fmt.Sprintf("%v.address", cmdPrefix)
	if cmd.Flags().Changed(addressFlagName) {

		var addressFlagName string
		if cmdPrefix == "" {
			addressFlagName = "address"
		} else {
			addressFlagName = fmt.Sprintf("%v.address", cmdPrefix)
		}

		addressFlagValue, err := cmd.Flags().GetString(addressFlagName)
		if err != nil {
			return err, false
		}
		m.Address = addressFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoCreatedAtFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "createdAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoIDFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoNameFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoSerialFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	serialFlagName := fmt.Sprintf("%v.serial", cmdPrefix)
	if cmd.Flags().Changed(serialFlagName) {

		var serialFlagName string
		if cmdPrefix == "" {
			serialFlagName = "serial"
		} else {
			serialFlagName = fmt.Sprintf("%v.serial", cmdPrefix)
		}

		serialFlagValue, err := cmd.Flags().GetString(serialFlagName)
		if err != nil {
			return err, false
		}
		m.Serial = serialFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoSwitchModelFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	switchModelFlagName := fmt.Sprintf("%v.switchModel", cmdPrefix)
	if cmd.Flags().Changed(switchModelFlagName) {

		var switchModelFlagName string
		if cmdPrefix == "" {
			switchModelFlagName = "switchModel"
		} else {
			switchModelFlagName = fmt.Sprintf("%v.switchModel", cmdPrefix)
		}

		switchModelFlagValue, err := cmd.Flags().GetString(switchModelFlagName)
		if err != nil {
			return err, false
		}
		m.SwitchModel = switchModelFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoUpdatedAtFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchDtoUsernameFlags(depth int, m *models.DtosEthernetSwitchDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	usernameFlagName := fmt.Sprintf("%v.username", cmdPrefix)
	if cmd.Flags().Changed(usernameFlagName) {

		var usernameFlagName string
		if cmdPrefix == "" {
			usernameFlagName = "username"
		} else {
			usernameFlagName = fmt.Sprintf("%v.username", cmdPrefix)
		}

		usernameFlagValue, err := cmd.Flags().GetString(usernameFlagName)
		if err != nil {
			return err, false
		}
		m.Username = usernameFlagValue

		retAdded = true
	}

	return nil, retAdded
}
