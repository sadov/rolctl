// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosEthernetSwitchModelDto

// register flags to command
func registerModelDtosEthernetSwitchModelDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosEthernetSwitchModelDtoCode(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchModelDtoManufacturer(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchModelDtoModel(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosEthernetSwitchModelDtoCode(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	codeDescription := `Code - unique switch model code`

	var codeFlagName string
	if cmdPrefix == "" {
		codeFlagName = "code"
	} else {
		codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var codeFlagDefault string

	_ = cmd.PersistentFlags().String(codeFlagName, codeFlagDefault, codeDescription)

	return nil
}

func registerDtosEthernetSwitchModelDtoManufacturer(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	manufacturerDescription := `Manufacturer - Switch model manufacturer`

	var manufacturerFlagName string
	if cmdPrefix == "" {
		manufacturerFlagName = "manufacturer"
	} else {
		manufacturerFlagName = fmt.Sprintf("%v.manufacturer", cmdPrefix)
	}

	var manufacturerFlagDefault string

	_ = cmd.PersistentFlags().String(manufacturerFlagName, manufacturerFlagDefault, manufacturerDescription)

	return nil
}

func registerDtosEthernetSwitchModelDtoModel(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	modelDescription := `Model - Switch model`

	var modelFlagName string
	if cmdPrefix == "" {
		modelFlagName = "model"
	} else {
		modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
	}

	var modelFlagDefault string

	_ = cmd.PersistentFlags().String(modelFlagName, modelFlagDefault, modelDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosEthernetSwitchModelDtoFlags(depth int, m *models.DtosEthernetSwitchModelDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, codeAdded := retrieveDtosEthernetSwitchModelDtoCodeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || codeAdded

	err, manufacturerAdded := retrieveDtosEthernetSwitchModelDtoManufacturerFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || manufacturerAdded

	err, modelAdded := retrieveDtosEthernetSwitchModelDtoModelFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || modelAdded

	return nil, retAdded
}

func retrieveDtosEthernetSwitchModelDtoCodeFlags(depth int, m *models.DtosEthernetSwitchModelDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	codeFlagName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(codeFlagName) {

		var codeFlagName string
		if cmdPrefix == "" {
			codeFlagName = "code"
		} else {
			codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		codeFlagValue, err := cmd.Flags().GetString(codeFlagName)
		if err != nil {
			return err, false
		}
		m.Code = codeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchModelDtoManufacturerFlags(depth int, m *models.DtosEthernetSwitchModelDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	manufacturerFlagName := fmt.Sprintf("%v.manufacturer", cmdPrefix)
	if cmd.Flags().Changed(manufacturerFlagName) {

		var manufacturerFlagName string
		if cmdPrefix == "" {
			manufacturerFlagName = "manufacturer"
		} else {
			manufacturerFlagName = fmt.Sprintf("%v.manufacturer", cmdPrefix)
		}

		manufacturerFlagValue, err := cmd.Flags().GetString(manufacturerFlagName)
		if err != nil {
			return err, false
		}
		m.Manufacturer = manufacturerFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchModelDtoModelFlags(depth int, m *models.DtosEthernetSwitchModelDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	modelFlagName := fmt.Sprintf("%v.model", cmdPrefix)
	if cmd.Flags().Changed(modelFlagName) {

		var modelFlagName string
		if cmdPrefix == "" {
			modelFlagName = "model"
		} else {
			modelFlagName = fmt.Sprintf("%v.model", cmdPrefix)
		}

		modelFlagValue, err := cmd.Flags().GetString(modelFlagName)
		if err != nil {
			return err, false
		}
		m.Model = modelFlagValue

		retAdded = true
	}

	return nil, retAdded
}
