// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosEthernetSwitchPortDto

// register flags to command
func registerModelDtosEthernetSwitchPortDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosEthernetSwitchPortDtoCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchPortDtoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchPortDtoName(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchPortDtoPoeenabled(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchPortDtoPoetype(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchPortDtoPvid(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchPortDtoUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosEthernetSwitchPortDtoCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := `CreatedAt - entity create time`

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "createdAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerDtosEthernetSwitchPortDtoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `ID - unique identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerDtosEthernetSwitchPortDtoName(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	nameDescription := `Name for this port`

	var nameFlagName string
	if cmdPrefix == "" {
		nameFlagName = "name"
	} else {
		nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
	}

	var nameFlagDefault string

	_ = cmd.PersistentFlags().String(nameFlagName, nameFlagDefault, nameDescription)

	return nil
}

func registerDtosEthernetSwitchPortDtoPoeenabled(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poeenabledDescription := `POEEnabled POE status on a port`

	var poeenabledFlagName string
	if cmdPrefix == "" {
		poeenabledFlagName = "poeenabled"
	} else {
		poeenabledFlagName = fmt.Sprintf("%v.poeenabled", cmdPrefix)
	}

	var poeenabledFlagDefault bool

	_ = cmd.PersistentFlags().Bool(poeenabledFlagName, poeenabledFlagDefault, poeenabledDescription)

	return nil
}

func registerDtosEthernetSwitchPortDtoPoetype(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	poetypeDescription := `POEType type of PoE for this port
can be: "poe", "poe+", "passive24", "none"`

	var poetypeFlagName string
	if cmdPrefix == "" {
		poetypeFlagName = "poetype"
	} else {
		poetypeFlagName = fmt.Sprintf("%v.poetype", cmdPrefix)
	}

	var poetypeFlagDefault string

	_ = cmd.PersistentFlags().String(poetypeFlagName, poetypeFlagDefault, poetypeDescription)

	return nil
}

func registerDtosEthernetSwitchPortDtoPvid(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	pvidDescription := `PVID default VLAN id`

	var pvidFlagName string
	if cmdPrefix == "" {
		pvidFlagName = "pvid"
	} else {
		pvidFlagName = fmt.Sprintf("%v.pvid", cmdPrefix)
	}

	var pvidFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pvidFlagName, pvidFlagDefault, pvidDescription)

	return nil
}

func registerDtosEthernetSwitchPortDtoUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := `UpdatedAt - entity update time`

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosEthernetSwitchPortDtoFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveDtosEthernetSwitchPortDtoCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, idAdded := retrieveDtosEthernetSwitchPortDtoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, nameAdded := retrieveDtosEthernetSwitchPortDtoNameFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || nameAdded

	err, poeenabledAdded := retrieveDtosEthernetSwitchPortDtoPoeenabledFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poeenabledAdded

	err, poetypeAdded := retrieveDtosEthernetSwitchPortDtoPoetypeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || poetypeAdded

	err, pvidAdded := retrieveDtosEthernetSwitchPortDtoPvidFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || pvidAdded

	err, updatedAtAdded := retrieveDtosEthernetSwitchPortDtoUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	return nil, retAdded
}

func retrieveDtosEthernetSwitchPortDtoCreatedAtFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "createdAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchPortDtoIDFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchPortDtoNameFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	nameFlagName := fmt.Sprintf("%v.name", cmdPrefix)
	if cmd.Flags().Changed(nameFlagName) {

		var nameFlagName string
		if cmdPrefix == "" {
			nameFlagName = "name"
		} else {
			nameFlagName = fmt.Sprintf("%v.name", cmdPrefix)
		}

		nameFlagValue, err := cmd.Flags().GetString(nameFlagName)
		if err != nil {
			return err, false
		}
		m.Name = nameFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchPortDtoPoeenabledFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poeenabledFlagName := fmt.Sprintf("%v.poeenabled", cmdPrefix)
	if cmd.Flags().Changed(poeenabledFlagName) {

		var poeenabledFlagName string
		if cmdPrefix == "" {
			poeenabledFlagName = "poeenabled"
		} else {
			poeenabledFlagName = fmt.Sprintf("%v.poeenabled", cmdPrefix)
		}

		poeenabledFlagValue, err := cmd.Flags().GetBool(poeenabledFlagName)
		if err != nil {
			return err, false
		}
		m.Poeenabled = poeenabledFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchPortDtoPoetypeFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	poetypeFlagName := fmt.Sprintf("%v.poetype", cmdPrefix)
	if cmd.Flags().Changed(poetypeFlagName) {

		var poetypeFlagName string
		if cmdPrefix == "" {
			poetypeFlagName = "poetype"
		} else {
			poetypeFlagName = fmt.Sprintf("%v.poetype", cmdPrefix)
		}

		poetypeFlagValue, err := cmd.Flags().GetString(poetypeFlagName)
		if err != nil {
			return err, false
		}
		m.Poetype = poetypeFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchPortDtoPvidFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	pvidFlagName := fmt.Sprintf("%v.pvid", cmdPrefix)
	if cmd.Flags().Changed(pvidFlagName) {

		var pvidFlagName string
		if cmdPrefix == "" {
			pvidFlagName = "pvid"
		} else {
			pvidFlagName = fmt.Sprintf("%v.pvid", cmdPrefix)
		}

		pvidFlagValue, err := cmd.Flags().GetInt64(pvidFlagName)
		if err != nil {
			return err, false
		}
		m.Pvid = pvidFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchPortDtoUpdatedAtFlags(depth int, m *models.DtosEthernetSwitchPortDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}
