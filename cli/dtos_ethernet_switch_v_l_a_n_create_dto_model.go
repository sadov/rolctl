// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosEthernetSwitchVLANCreateDto

// register flags to command
func registerModelDtosEthernetSwitchVLANCreateDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosEthernetSwitchVLANCreateDtoTaggedPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANCreateDtoUntaggedPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANCreateDtoVlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosEthernetSwitchVLANCreateDtoTaggedPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: taggedPorts []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosEthernetSwitchVLANCreateDtoUntaggedPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: untaggedPorts []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosEthernetSwitchVLANCreateDtoVlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlanIdDescription := `VlanID VLAN ID`

	var vlanIdFlagName string
	if cmdPrefix == "" {
		vlanIdFlagName = "vlanID"
	} else {
		vlanIdFlagName = fmt.Sprintf("%v.vlanID", cmdPrefix)
	}

	var vlanIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(vlanIdFlagName, vlanIdFlagDefault, vlanIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosEthernetSwitchVLANCreateDtoFlags(depth int, m *models.DtosEthernetSwitchVLANCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, taggedPortsAdded := retrieveDtosEthernetSwitchVLANCreateDtoTaggedPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taggedPortsAdded

	err, untaggedPortsAdded := retrieveDtosEthernetSwitchVLANCreateDtoUntaggedPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || untaggedPortsAdded

	err, vlanIdAdded := retrieveDtosEthernetSwitchVLANCreateDtoVlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlanIdAdded

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANCreateDtoTaggedPortsFlags(depth int, m *models.DtosEthernetSwitchVLANCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taggedPortsFlagName := fmt.Sprintf("%v.taggedPorts", cmdPrefix)
	if cmd.Flags().Changed(taggedPortsFlagName) {
		// warning: taggedPorts array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANCreateDtoUntaggedPortsFlags(depth int, m *models.DtosEthernetSwitchVLANCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	untaggedPortsFlagName := fmt.Sprintf("%v.untaggedPorts", cmdPrefix)
	if cmd.Flags().Changed(untaggedPortsFlagName) {
		// warning: untaggedPorts array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANCreateDtoVlanIDFlags(depth int, m *models.DtosEthernetSwitchVLANCreateDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlanIdFlagName := fmt.Sprintf("%v.vlanID", cmdPrefix)
	if cmd.Flags().Changed(vlanIdFlagName) {

		var vlanIdFlagName string
		if cmdPrefix == "" {
			vlanIdFlagName = "vlanID"
		} else {
			vlanIdFlagName = fmt.Sprintf("%v.vlanID", cmdPrefix)
		}

		vlanIdFlagValue, err := cmd.Flags().GetInt64(vlanIdFlagName)
		if err != nil {
			return err, false
		}
		m.VlanID = vlanIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
