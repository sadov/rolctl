// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosEthernetSwitchVLANDto

// register flags to command
func registerModelDtosEthernetSwitchVLANDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosEthernetSwitchVLANDtoCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANDtoEthernetSwitchID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANDtoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANDtoTaggedPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANDtoUntaggedPorts(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANDtoUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosEthernetSwitchVLANDtoVlanID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosEthernetSwitchVLANDtoCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := `CreatedAt - entity create time`

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "createdAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerDtosEthernetSwitchVLANDtoEthernetSwitchID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	ethernetSwitchIdDescription := `EthernetSwitchID ethernet switch ID`

	var ethernetSwitchIdFlagName string
	if cmdPrefix == "" {
		ethernetSwitchIdFlagName = "ethernetSwitchID"
	} else {
		ethernetSwitchIdFlagName = fmt.Sprintf("%v.ethernetSwitchID", cmdPrefix)
	}

	var ethernetSwitchIdFlagDefault string

	_ = cmd.PersistentFlags().String(ethernetSwitchIdFlagName, ethernetSwitchIdFlagDefault, ethernetSwitchIdDescription)

	return nil
}

func registerDtosEthernetSwitchVLANDtoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `ID - unique identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerDtosEthernetSwitchVLANDtoTaggedPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: taggedPorts []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosEthernetSwitchVLANDtoUntaggedPorts(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: untaggedPorts []string array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosEthernetSwitchVLANDtoUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := `UpdatedAt - entity update time`

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

func registerDtosEthernetSwitchVLANDtoVlanID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	vlanIdDescription := `VlanID VLAN ID`

	var vlanIdFlagName string
	if cmdPrefix == "" {
		vlanIdFlagName = "vlanID"
	} else {
		vlanIdFlagName = fmt.Sprintf("%v.vlanID", cmdPrefix)
	}

	var vlanIdFlagDefault int64

	_ = cmd.PersistentFlags().Int64(vlanIdFlagName, vlanIdFlagDefault, vlanIdDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosEthernetSwitchVLANDtoFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, createdAtAdded := retrieveDtosEthernetSwitchVLANDtoCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, ethernetSwitchIdAdded := retrieveDtosEthernetSwitchVLANDtoEthernetSwitchIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || ethernetSwitchIdAdded

	err, idAdded := retrieveDtosEthernetSwitchVLANDtoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, taggedPortsAdded := retrieveDtosEthernetSwitchVLANDtoTaggedPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || taggedPortsAdded

	err, untaggedPortsAdded := retrieveDtosEthernetSwitchVLANDtoUntaggedPortsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || untaggedPortsAdded

	err, updatedAtAdded := retrieveDtosEthernetSwitchVLANDtoUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	err, vlanIdAdded := retrieveDtosEthernetSwitchVLANDtoVlanIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || vlanIdAdded

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANDtoCreatedAtFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "createdAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANDtoEthernetSwitchIDFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	ethernetSwitchIdFlagName := fmt.Sprintf("%v.ethernetSwitchID", cmdPrefix)
	if cmd.Flags().Changed(ethernetSwitchIdFlagName) {

		var ethernetSwitchIdFlagName string
		if cmdPrefix == "" {
			ethernetSwitchIdFlagName = "ethernetSwitchID"
		} else {
			ethernetSwitchIdFlagName = fmt.Sprintf("%v.ethernetSwitchID", cmdPrefix)
		}

		ethernetSwitchIdFlagValue, err := cmd.Flags().GetString(ethernetSwitchIdFlagName)
		if err != nil {
			return err, false
		}
		m.EthernetSwitchID = ethernetSwitchIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANDtoIDFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANDtoTaggedPortsFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	taggedPortsFlagName := fmt.Sprintf("%v.taggedPorts", cmdPrefix)
	if cmd.Flags().Changed(taggedPortsFlagName) {
		// warning: taggedPorts array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANDtoUntaggedPortsFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	untaggedPortsFlagName := fmt.Sprintf("%v.untaggedPorts", cmdPrefix)
	if cmd.Flags().Changed(untaggedPortsFlagName) {
		// warning: untaggedPorts array type []string is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANDtoUpdatedAtFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosEthernetSwitchVLANDtoVlanIDFlags(depth int, m *models.DtosEthernetSwitchVLANDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	vlanIdFlagName := fmt.Sprintf("%v.vlanID", cmdPrefix)
	if cmd.Flags().Changed(vlanIdFlagName) {

		var vlanIdFlagName string
		if cmdPrefix == "" {
			vlanIdFlagName = "vlanID"
		} else {
			vlanIdFlagName = fmt.Sprintf("%v.vlanID", cmdPrefix)
		}

		vlanIdFlagValue, err := cmd.Flags().GetInt64(vlanIdFlagName)
		if err != nil {
			return err, false
		}
		m.VlanID = vlanIdFlagValue

		retAdded = true
	}

	return nil, retAdded
}
