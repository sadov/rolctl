// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosHTTPLogDto

// register flags to command
func registerModelDtosHTTPLogDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosHTTPLogDtoClientIP(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoCreatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoCustomRequestHeaders(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoDomain(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoHttpmethod(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoID(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoLatency(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoQueryParams(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoRelativePath(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoRequestBody(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoRequestHeaders(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoResponseBody(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosHTTPLogDtoUpdatedAt(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosHTTPLogDtoClientIP(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	clientIpDescription := `ClientIP - client IP address`

	var clientIpFlagName string
	if cmdPrefix == "" {
		clientIpFlagName = "clientIP"
	} else {
		clientIpFlagName = fmt.Sprintf("%v.clientIP", cmdPrefix)
	}

	var clientIpFlagDefault string

	_ = cmd.PersistentFlags().String(clientIpFlagName, clientIpFlagDefault, clientIpDescription)

	return nil
}

func registerDtosHTTPLogDtoCreatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	createdAtDescription := `CreatedAt - entity create time`

	var createdAtFlagName string
	if cmdPrefix == "" {
		createdAtFlagName = "createdAt"
	} else {
		createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
	}

	var createdAtFlagDefault string

	_ = cmd.PersistentFlags().String(createdAtFlagName, createdAtFlagDefault, createdAtDescription)

	return nil
}

func registerDtosHTTPLogDtoCustomRequestHeaders(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	customRequestHeadersDescription := `CustomRequestHeaders - custom headers of the request`

	var customRequestHeadersFlagName string
	if cmdPrefix == "" {
		customRequestHeadersFlagName = "customRequestHeaders"
	} else {
		customRequestHeadersFlagName = fmt.Sprintf("%v.customRequestHeaders", cmdPrefix)
	}

	var customRequestHeadersFlagDefault string

	_ = cmd.PersistentFlags().String(customRequestHeadersFlagName, customRequestHeadersFlagDefault, customRequestHeadersDescription)

	return nil
}

func registerDtosHTTPLogDtoDomain(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	domainDescription := `Domain - domain that processed the request`

	var domainFlagName string
	if cmdPrefix == "" {
		domainFlagName = "domain"
	} else {
		domainFlagName = fmt.Sprintf("%v.domain", cmdPrefix)
	}

	var domainFlagDefault string

	_ = cmd.PersistentFlags().String(domainFlagName, domainFlagDefault, domainDescription)

	return nil
}

func registerDtosHTTPLogDtoHttpmethod(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	httpmethodDescription := `HTTPMethod - http method`

	var httpmethodFlagName string
	if cmdPrefix == "" {
		httpmethodFlagName = "httpmethod"
	} else {
		httpmethodFlagName = fmt.Sprintf("%v.httpmethod", cmdPrefix)
	}

	var httpmethodFlagDefault string

	_ = cmd.PersistentFlags().String(httpmethodFlagName, httpmethodFlagDefault, httpmethodDescription)

	return nil
}

func registerDtosHTTPLogDtoID(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	idDescription := `ID - unique identifier`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}

func registerDtosHTTPLogDtoLatency(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	latencyDescription := `Latency - latency in milliseconds`

	var latencyFlagName string
	if cmdPrefix == "" {
		latencyFlagName = "latency"
	} else {
		latencyFlagName = fmt.Sprintf("%v.latency", cmdPrefix)
	}

	var latencyFlagDefault int64

	_ = cmd.PersistentFlags().Int64(latencyFlagName, latencyFlagDefault, latencyDescription)

	return nil
}

func registerDtosHTTPLogDtoQueryParams(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	queryParamsDescription := `QueryParams - query params passed`

	var queryParamsFlagName string
	if cmdPrefix == "" {
		queryParamsFlagName = "queryParams"
	} else {
		queryParamsFlagName = fmt.Sprintf("%v.queryParams", cmdPrefix)
	}

	var queryParamsFlagDefault string

	_ = cmd.PersistentFlags().String(queryParamsFlagName, queryParamsFlagDefault, queryParamsDescription)

	return nil
}

func registerDtosHTTPLogDtoRelativePath(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	relativePathDescription := `RelativePath - path to the endpoint`

	var relativePathFlagName string
	if cmdPrefix == "" {
		relativePathFlagName = "relativePath"
	} else {
		relativePathFlagName = fmt.Sprintf("%v.relativePath", cmdPrefix)
	}

	var relativePathFlagDefault string

	_ = cmd.PersistentFlags().String(relativePathFlagName, relativePathFlagDefault, relativePathDescription)

	return nil
}

func registerDtosHTTPLogDtoRequestBody(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	requestBodyDescription := `RequestBody - body of the request`

	var requestBodyFlagName string
	if cmdPrefix == "" {
		requestBodyFlagName = "requestBody"
	} else {
		requestBodyFlagName = fmt.Sprintf("%v.requestBody", cmdPrefix)
	}

	var requestBodyFlagDefault string

	_ = cmd.PersistentFlags().String(requestBodyFlagName, requestBodyFlagDefault, requestBodyDescription)

	return nil
}

func registerDtosHTTPLogDtoRequestHeaders(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	requestHeadersDescription := `RequestHeaders - headers of the request`

	var requestHeadersFlagName string
	if cmdPrefix == "" {
		requestHeadersFlagName = "requestHeaders"
	} else {
		requestHeadersFlagName = fmt.Sprintf("%v.requestHeaders", cmdPrefix)
	}

	var requestHeadersFlagDefault string

	_ = cmd.PersistentFlags().String(requestHeadersFlagName, requestHeadersFlagDefault, requestHeadersDescription)

	return nil
}

func registerDtosHTTPLogDtoResponseBody(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	responseBodyDescription := `ResponseBody - body of the response`

	var responseBodyFlagName string
	if cmdPrefix == "" {
		responseBodyFlagName = "responseBody"
	} else {
		responseBodyFlagName = fmt.Sprintf("%v.responseBody", cmdPrefix)
	}

	var responseBodyFlagDefault string

	_ = cmd.PersistentFlags().String(responseBodyFlagName, responseBodyFlagDefault, responseBodyDescription)

	return nil
}

func registerDtosHTTPLogDtoUpdatedAt(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	updatedAtDescription := `UpdatedAt - entity update time`

	var updatedAtFlagName string
	if cmdPrefix == "" {
		updatedAtFlagName = "updatedAt"
	} else {
		updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
	}

	var updatedAtFlagDefault string

	_ = cmd.PersistentFlags().String(updatedAtFlagName, updatedAtFlagDefault, updatedAtDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosHTTPLogDtoFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, clientIpAdded := retrieveDtosHTTPLogDtoClientIPFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || clientIpAdded

	err, createdAtAdded := retrieveDtosHTTPLogDtoCreatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || createdAtAdded

	err, customRequestHeadersAdded := retrieveDtosHTTPLogDtoCustomRequestHeadersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || customRequestHeadersAdded

	err, domainAdded := retrieveDtosHTTPLogDtoDomainFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || domainAdded

	err, httpmethodAdded := retrieveDtosHTTPLogDtoHttpmethodFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || httpmethodAdded

	err, idAdded := retrieveDtosHTTPLogDtoIDFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || idAdded

	err, latencyAdded := retrieveDtosHTTPLogDtoLatencyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || latencyAdded

	err, queryParamsAdded := retrieveDtosHTTPLogDtoQueryParamsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || queryParamsAdded

	err, relativePathAdded := retrieveDtosHTTPLogDtoRelativePathFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || relativePathAdded

	err, requestBodyAdded := retrieveDtosHTTPLogDtoRequestBodyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || requestBodyAdded

	err, requestHeadersAdded := retrieveDtosHTTPLogDtoRequestHeadersFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || requestHeadersAdded

	err, responseBodyAdded := retrieveDtosHTTPLogDtoResponseBodyFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || responseBodyAdded

	err, updatedAtAdded := retrieveDtosHTTPLogDtoUpdatedAtFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || updatedAtAdded

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoClientIPFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	clientIpFlagName := fmt.Sprintf("%v.clientIP", cmdPrefix)
	if cmd.Flags().Changed(clientIpFlagName) {

		var clientIpFlagName string
		if cmdPrefix == "" {
			clientIpFlagName = "clientIP"
		} else {
			clientIpFlagName = fmt.Sprintf("%v.clientIP", cmdPrefix)
		}

		clientIpFlagValue, err := cmd.Flags().GetString(clientIpFlagName)
		if err != nil {
			return err, false
		}
		m.ClientIP = clientIpFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoCreatedAtFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	createdAtFlagName := fmt.Sprintf("%v.createdAt", cmdPrefix)
	if cmd.Flags().Changed(createdAtFlagName) {

		var createdAtFlagName string
		if cmdPrefix == "" {
			createdAtFlagName = "createdAt"
		} else {
			createdAtFlagName = fmt.Sprintf("%v.createdAt", cmdPrefix)
		}

		createdAtFlagValue, err := cmd.Flags().GetString(createdAtFlagName)
		if err != nil {
			return err, false
		}
		m.CreatedAt = createdAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoCustomRequestHeadersFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	customRequestHeadersFlagName := fmt.Sprintf("%v.customRequestHeaders", cmdPrefix)
	if cmd.Flags().Changed(customRequestHeadersFlagName) {

		var customRequestHeadersFlagName string
		if cmdPrefix == "" {
			customRequestHeadersFlagName = "customRequestHeaders"
		} else {
			customRequestHeadersFlagName = fmt.Sprintf("%v.customRequestHeaders", cmdPrefix)
		}

		customRequestHeadersFlagValue, err := cmd.Flags().GetString(customRequestHeadersFlagName)
		if err != nil {
			return err, false
		}
		m.CustomRequestHeaders = customRequestHeadersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoDomainFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	domainFlagName := fmt.Sprintf("%v.domain", cmdPrefix)
	if cmd.Flags().Changed(domainFlagName) {

		var domainFlagName string
		if cmdPrefix == "" {
			domainFlagName = "domain"
		} else {
			domainFlagName = fmt.Sprintf("%v.domain", cmdPrefix)
		}

		domainFlagValue, err := cmd.Flags().GetString(domainFlagName)
		if err != nil {
			return err, false
		}
		m.Domain = domainFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoHttpmethodFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	httpmethodFlagName := fmt.Sprintf("%v.httpmethod", cmdPrefix)
	if cmd.Flags().Changed(httpmethodFlagName) {

		var httpmethodFlagName string
		if cmdPrefix == "" {
			httpmethodFlagName = "httpmethod"
		} else {
			httpmethodFlagName = fmt.Sprintf("%v.httpmethod", cmdPrefix)
		}

		httpmethodFlagValue, err := cmd.Flags().GetString(httpmethodFlagName)
		if err != nil {
			return err, false
		}
		m.Httpmethod = httpmethodFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoIDFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	idFlagName := fmt.Sprintf("%v.id", cmdPrefix)
	if cmd.Flags().Changed(idFlagName) {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoLatencyFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	latencyFlagName := fmt.Sprintf("%v.latency", cmdPrefix)
	if cmd.Flags().Changed(latencyFlagName) {

		var latencyFlagName string
		if cmdPrefix == "" {
			latencyFlagName = "latency"
		} else {
			latencyFlagName = fmt.Sprintf("%v.latency", cmdPrefix)
		}

		latencyFlagValue, err := cmd.Flags().GetInt64(latencyFlagName)
		if err != nil {
			return err, false
		}
		m.Latency = latencyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoQueryParamsFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	queryParamsFlagName := fmt.Sprintf("%v.queryParams", cmdPrefix)
	if cmd.Flags().Changed(queryParamsFlagName) {

		var queryParamsFlagName string
		if cmdPrefix == "" {
			queryParamsFlagName = "queryParams"
		} else {
			queryParamsFlagName = fmt.Sprintf("%v.queryParams", cmdPrefix)
		}

		queryParamsFlagValue, err := cmd.Flags().GetString(queryParamsFlagName)
		if err != nil {
			return err, false
		}
		m.QueryParams = queryParamsFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoRelativePathFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	relativePathFlagName := fmt.Sprintf("%v.relativePath", cmdPrefix)
	if cmd.Flags().Changed(relativePathFlagName) {

		var relativePathFlagName string
		if cmdPrefix == "" {
			relativePathFlagName = "relativePath"
		} else {
			relativePathFlagName = fmt.Sprintf("%v.relativePath", cmdPrefix)
		}

		relativePathFlagValue, err := cmd.Flags().GetString(relativePathFlagName)
		if err != nil {
			return err, false
		}
		m.RelativePath = relativePathFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoRequestBodyFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	requestBodyFlagName := fmt.Sprintf("%v.requestBody", cmdPrefix)
	if cmd.Flags().Changed(requestBodyFlagName) {

		var requestBodyFlagName string
		if cmdPrefix == "" {
			requestBodyFlagName = "requestBody"
		} else {
			requestBodyFlagName = fmt.Sprintf("%v.requestBody", cmdPrefix)
		}

		requestBodyFlagValue, err := cmd.Flags().GetString(requestBodyFlagName)
		if err != nil {
			return err, false
		}
		m.RequestBody = requestBodyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoRequestHeadersFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	requestHeadersFlagName := fmt.Sprintf("%v.requestHeaders", cmdPrefix)
	if cmd.Flags().Changed(requestHeadersFlagName) {

		var requestHeadersFlagName string
		if cmdPrefix == "" {
			requestHeadersFlagName = "requestHeaders"
		} else {
			requestHeadersFlagName = fmt.Sprintf("%v.requestHeaders", cmdPrefix)
		}

		requestHeadersFlagValue, err := cmd.Flags().GetString(requestHeadersFlagName)
		if err != nil {
			return err, false
		}
		m.RequestHeaders = requestHeadersFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoResponseBodyFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	responseBodyFlagName := fmt.Sprintf("%v.responseBody", cmdPrefix)
	if cmd.Flags().Changed(responseBodyFlagName) {

		var responseBodyFlagName string
		if cmdPrefix == "" {
			responseBodyFlagName = "responseBody"
		} else {
			responseBodyFlagName = fmt.Sprintf("%v.responseBody", cmdPrefix)
		}

		responseBodyFlagValue, err := cmd.Flags().GetString(responseBodyFlagName)
		if err != nil {
			return err, false
		}
		m.ResponseBody = responseBodyFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosHTTPLogDtoUpdatedAtFlags(depth int, m *models.DtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	updatedAtFlagName := fmt.Sprintf("%v.updatedAt", cmdPrefix)
	if cmd.Flags().Changed(updatedAtFlagName) {

		var updatedAtFlagName string
		if cmdPrefix == "" {
			updatedAtFlagName = "updatedAt"
		} else {
			updatedAtFlagName = fmt.Sprintf("%v.updatedAt", cmdPrefix)
		}

		updatedAtFlagValue, err := cmd.Flags().GetString(updatedAtFlagName)
		if err != nil {
			return err, false
		}
		m.UpdatedAt = updatedAtFlagValue

		retAdded = true
	}

	return nil, retAdded
}
