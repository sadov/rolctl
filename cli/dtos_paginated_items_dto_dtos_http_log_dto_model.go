// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/swag"

	"github.com/spf13/cobra"

	"github.com/sadov/rolctl/models"
)

// Schema cli for DtosPaginatedItemsDtoDtosHTTPLogDto

// register flags to command
func registerModelDtosPaginatedItemsDtoDtosHTTPLogDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosPaginatedItemsDtoDtosHTTPLogDtoItems(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosPaginatedItemsDtoDtosHTTPLogDtoPagination(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosPaginatedItemsDtoDtosHTTPLogDtoItems(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	// warning: items []*DtosHTTPLogDto array type is not supported by go-swagger cli yet

	return nil
}

func registerDtosPaginatedItemsDtoDtosHTTPLogDtoPagination(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	var paginationFlagName string
	if cmdPrefix == "" {
		paginationFlagName = "pagination"
	} else {
		paginationFlagName = fmt.Sprintf("%v.pagination", cmdPrefix)
	}

	if err := registerModelDtosPaginationInfoDtoFlags(depth+1, paginationFlagName, cmd); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosPaginatedItemsDtoDtosHTTPLogDtoFlags(depth int, m *models.DtosPaginatedItemsDtoDtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, itemsAdded := retrieveDtosPaginatedItemsDtoDtosHTTPLogDtoItemsFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || itemsAdded

	err, paginationAdded := retrieveDtosPaginatedItemsDtoDtosHTTPLogDtoPaginationFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || paginationAdded

	return nil, retAdded
}

func retrieveDtosPaginatedItemsDtoDtosHTTPLogDtoItemsFlags(depth int, m *models.DtosPaginatedItemsDtoDtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	itemsFlagName := fmt.Sprintf("%v.items", cmdPrefix)
	if cmd.Flags().Changed(itemsFlagName) {
		// warning: items array type []*DtosHTTPLogDto is not supported by go-swagger cli yet
	}

	return nil, retAdded
}

func retrieveDtosPaginatedItemsDtoDtosHTTPLogDtoPaginationFlags(depth int, m *models.DtosPaginatedItemsDtoDtosHTTPLogDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	paginationFlagName := fmt.Sprintf("%v.pagination", cmdPrefix)
	if cmd.Flags().Changed(paginationFlagName) {
		// info: complex object pagination DtosPaginationInfoDto is retrieved outside this Changed() block
	}
	paginationFlagValue := m.Pagination
	if swag.IsZero(paginationFlagValue) {
		paginationFlagValue = &models.DtosPaginationInfoDto{}
	}

	err, paginationAdded := retrieveModelDtosPaginationInfoDtoFlags(depth+1, paginationFlagValue, paginationFlagName, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || paginationAdded
	if paginationAdded {
		m.Pagination = paginationFlagValue
	}

	return nil, retAdded
}
