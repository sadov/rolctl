// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/sadov/rolctl/models"
	"github.com/spf13/cobra"
)

// Schema cli for DtosValidationErrorElemDto

// register flags to command
func registerModelDtosValidationErrorElemDtoFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerDtosValidationErrorElemDtoError(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosValidationErrorElemDtoField(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerDtosValidationErrorElemDtoSource(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerDtosValidationErrorElemDtoError(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	errorDescription := `Value for Key`

	var errorFlagName string
	if cmdPrefix == "" {
		errorFlagName = "error"
	} else {
		errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
	}

	var errorFlagDefault string

	_ = cmd.PersistentFlags().String(errorFlagName, errorFlagDefault, errorDescription)

	return nil
}

func registerDtosValidationErrorElemDtoField(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	fieldDescription := `Field with validation error`

	var fieldFlagName string
	if cmdPrefix == "" {
		fieldFlagName = "field"
	} else {
		fieldFlagName = fmt.Sprintf("%v.field", cmdPrefix)
	}

	var fieldFlagDefault string

	_ = cmd.PersistentFlags().String(fieldFlagName, fieldFlagDefault, fieldDescription)

	return nil
}

func registerDtosValidationErrorElemDtoSource(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	sourceDescription := `Source for the field, for example query or body`

	var sourceFlagName string
	if cmdPrefix == "" {
		sourceFlagName = "source"
	} else {
		sourceFlagName = fmt.Sprintf("%v.source", cmdPrefix)
	}

	var sourceFlagDefault string

	_ = cmd.PersistentFlags().String(sourceFlagName, sourceFlagDefault, sourceDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelDtosValidationErrorElemDtoFlags(depth int, m *models.DtosValidationErrorElemDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, errorAdded := retrieveDtosValidationErrorElemDtoErrorFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || errorAdded

	err, fieldAdded := retrieveDtosValidationErrorElemDtoFieldFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || fieldAdded

	err, sourceAdded := retrieveDtosValidationErrorElemDtoSourceFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || sourceAdded

	return nil, retAdded
}

func retrieveDtosValidationErrorElemDtoErrorFlags(depth int, m *models.DtosValidationErrorElemDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	errorFlagName := fmt.Sprintf("%v.error", cmdPrefix)
	if cmd.Flags().Changed(errorFlagName) {

		var errorFlagName string
		if cmdPrefix == "" {
			errorFlagName = "error"
		} else {
			errorFlagName = fmt.Sprintf("%v.error", cmdPrefix)
		}

		errorFlagValue, err := cmd.Flags().GetString(errorFlagName)
		if err != nil {
			return err, false
		}
		m.Error = errorFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosValidationErrorElemDtoFieldFlags(depth int, m *models.DtosValidationErrorElemDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	fieldFlagName := fmt.Sprintf("%v.field", cmdPrefix)
	if cmd.Flags().Changed(fieldFlagName) {

		var fieldFlagName string
		if cmdPrefix == "" {
			fieldFlagName = "field"
		} else {
			fieldFlagName = fmt.Sprintf("%v.field", cmdPrefix)
		}

		fieldFlagValue, err := cmd.Flags().GetString(fieldFlagName)
		if err != nil {
			return err, false
		}
		m.Field = fieldFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveDtosValidationErrorElemDtoSourceFlags(depth int, m *models.DtosValidationErrorElemDto, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	sourceFlagName := fmt.Sprintf("%v.source", cmdPrefix)
	if cmd.Flags().Changed(sourceFlagName) {

		var sourceFlagName string
		if cmdPrefix == "" {
			sourceFlagName = "source"
		} else {
			sourceFlagName = fmt.Sprintf("%v.source", cmdPrefix)
		}

		sourceFlagValue, err := cmd.Flags().GetString(sourceFlagName)
		if err != nil {
			return err, false
		}
		m.Source = sourceFlagValue

		retAdded = true
	}

	return nil, retAdded
}
