// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/sadov/rolctl/client/ethernet_switch"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEthernetSwitchGetEthernetSwitchIDPortCmd returns a cmd to handle operation getEthernetSwitchIdPort
func makeOperationEthernetSwitchGetEthernetSwitchIDPortCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "GetEthernetSwitchIDPort",
		Short: ``,
		RunE:  runOperationEthernetSwitchGetEthernetSwitchIDPort,
	}

	if err := registerOperationEthernetSwitchGetEthernetSwitchIDPortParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEthernetSwitchGetEthernetSwitchIDPort uses cmd flags to call endpoint api
func runOperationEthernetSwitchGetEthernetSwitchIDPort(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := ethernet_switch.NewGetEthernetSwitchIDPortParams()
	if err, _ := retrieveOperationEthernetSwitchGetEthernetSwitchIDPortIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchGetEthernetSwitchIDPortOrderByFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchGetEthernetSwitchIDPortOrderDirectionFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchGetEthernetSwitchIDPortPageFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchGetEthernetSwitchIDPortPageSizeFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchGetEthernetSwitchIDPortSearchFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEthernetSwitchGetEthernetSwitchIDPortResult(appCli.EthernetSwitch.GetEthernetSwitchIDPort(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEthernetSwitchGetEthernetSwitchIDPortParamFlags registers all flags needed to fill params
func registerOperationEthernetSwitchGetEthernetSwitchIDPortParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEthernetSwitchGetEthernetSwitchIDPortIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchGetEthernetSwitchIDPortOrderByParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchGetEthernetSwitchIDPortOrderDirectionParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchGetEthernetSwitchIDPortPageParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchGetEthernetSwitchIDPortPageSizeParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchGetEthernetSwitchIDPortSearchParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEthernetSwitchGetEthernetSwitchIDPortIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Ethernet switch ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationEthernetSwitchGetEthernetSwitchIDPortOrderByParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	orderByDescription := `Order by field, default - Name`

	var orderByFlagName string
	if cmdPrefix == "" {
		orderByFlagName = "orderBy"
	} else {
		orderByFlagName = fmt.Sprintf("%v.orderBy", cmdPrefix)
	}

	var orderByFlagDefault string

	_ = cmd.PersistentFlags().String(orderByFlagName, orderByFlagDefault, orderByDescription)

	return nil
}
func registerOperationEthernetSwitchGetEthernetSwitchIDPortOrderDirectionParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	orderDirectionDescription := `'asc' or 'desc' for ascending or descending order, default - asc`

	var orderDirectionFlagName string
	if cmdPrefix == "" {
		orderDirectionFlagName = "orderDirection"
	} else {
		orderDirectionFlagName = fmt.Sprintf("%v.orderDirection", cmdPrefix)
	}

	var orderDirectionFlagDefault string

	_ = cmd.PersistentFlags().String(orderDirectionFlagName, orderDirectionFlagDefault, orderDirectionDescription)

	return nil
}
func registerOperationEthernetSwitchGetEthernetSwitchIDPortPageParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageDescription := `Page number, default - 1`

	var pageFlagName string
	if cmdPrefix == "" {
		pageFlagName = "page"
	} else {
		pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
	}

	var pageFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pageFlagName, pageFlagDefault, pageDescription)

	return nil
}
func registerOperationEthernetSwitchGetEthernetSwitchIDPortPageSizeParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	pageSizeDescription := `Number of entities per page, default - 10`

	var pageSizeFlagName string
	if cmdPrefix == "" {
		pageSizeFlagName = "pageSize"
	} else {
		pageSizeFlagName = fmt.Sprintf("%v.pageSize", cmdPrefix)
	}

	var pageSizeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(pageSizeFlagName, pageSizeFlagDefault, pageSizeDescription)

	return nil
}
func registerOperationEthernetSwitchGetEthernetSwitchIDPortSearchParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	searchDescription := `Searchable value in entity, default - `

	var searchFlagName string
	if cmdPrefix == "" {
		searchFlagName = "search"
	} else {
		searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
	}

	var searchFlagDefault string

	_ = cmd.PersistentFlags().String(searchFlagName, searchFlagDefault, searchDescription)

	return nil
}

func retrieveOperationEthernetSwitchGetEthernetSwitchIDPortIDFlag(m *ethernet_switch.GetEthernetSwitchIDPortParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchGetEthernetSwitchIDPortOrderByFlag(m *ethernet_switch.GetEthernetSwitchIDPortParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("orderBy") {

		var orderByFlagName string
		if cmdPrefix == "" {
			orderByFlagName = "orderBy"
		} else {
			orderByFlagName = fmt.Sprintf("%v.orderBy", cmdPrefix)
		}

		orderByFlagValue, err := cmd.Flags().GetString(orderByFlagName)
		if err != nil {
			return err, false
		}
		m.OrderBy = &orderByFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchGetEthernetSwitchIDPortOrderDirectionFlag(m *ethernet_switch.GetEthernetSwitchIDPortParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("orderDirection") {

		var orderDirectionFlagName string
		if cmdPrefix == "" {
			orderDirectionFlagName = "orderDirection"
		} else {
			orderDirectionFlagName = fmt.Sprintf("%v.orderDirection", cmdPrefix)
		}

		orderDirectionFlagValue, err := cmd.Flags().GetString(orderDirectionFlagName)
		if err != nil {
			return err, false
		}
		m.OrderDirection = &orderDirectionFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchGetEthernetSwitchIDPortPageFlag(m *ethernet_switch.GetEthernetSwitchIDPortParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("page") {

		var pageFlagName string
		if cmdPrefix == "" {
			pageFlagName = "page"
		} else {
			pageFlagName = fmt.Sprintf("%v.page", cmdPrefix)
		}

		pageFlagValue, err := cmd.Flags().GetInt64(pageFlagName)
		if err != nil {
			return err, false
		}
		m.Page = &pageFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchGetEthernetSwitchIDPortPageSizeFlag(m *ethernet_switch.GetEthernetSwitchIDPortParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("pageSize") {

		var pageSizeFlagName string
		if cmdPrefix == "" {
			pageSizeFlagName = "pageSize"
		} else {
			pageSizeFlagName = fmt.Sprintf("%v.pageSize", cmdPrefix)
		}

		pageSizeFlagValue, err := cmd.Flags().GetInt64(pageSizeFlagName)
		if err != nil {
			return err, false
		}
		m.PageSize = &pageSizeFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchGetEthernetSwitchIDPortSearchFlag(m *ethernet_switch.GetEthernetSwitchIDPortParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("search") {

		var searchFlagName string
		if cmdPrefix == "" {
			searchFlagName = "search"
		} else {
			searchFlagName = fmt.Sprintf("%v.search", cmdPrefix)
		}

		searchFlagValue, err := cmd.Flags().GetString(searchFlagName)
		if err != nil {
			return err, false
		}
		m.Search = &searchFlagValue

	}
	return nil, retAdded
}

// parseOperationEthernetSwitchGetEthernetSwitchIDPortResult parses request result and return the string content
func parseOperationEthernetSwitchGetEthernetSwitchIDPortResult(resp0 *ethernet_switch.GetEthernetSwitchIDPortOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*ethernet_switch.GetEthernetSwitchIDPortOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning getEthernetSwitchIdPortNotFound is not supported

		// Non schema case: warning getEthernetSwitchIdPortInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
