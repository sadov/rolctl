// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/sadov/rolctl/client/ethernet_switch"
	"github.com/sadov/rolctl/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationEthernetSwitchPutEthernetSwitchIDPortPortIDCmd returns a cmd to handle operation putEthernetSwitchIdPortPortId
func makeOperationEthernetSwitchPutEthernetSwitchIDPortPortIDCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use:   "PutEthernetSwitchIDPortPortID",
		Short: ``,
		RunE:  runOperationEthernetSwitchPutEthernetSwitchIDPortPortID,
	}

	if err := registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationEthernetSwitchPutEthernetSwitchIDPortPortID uses cmd flags to call endpoint api
func runOperationEthernetSwitchPutEthernetSwitchIDPortPortID(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := ethernet_switch.NewPutEthernetSwitchIDPortPortIDParams()
	if err, _ := retrieveOperationEthernetSwitchPutEthernetSwitchIDPortPortIDIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchPutEthernetSwitchIDPortPortIDPortIDFlag(params, "", cmd); err != nil {
		return err
	}
	if err, _ := retrieveOperationEthernetSwitchPutEthernetSwitchIDPortPortIDRequestFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationEthernetSwitchPutEthernetSwitchIDPortPortIDResult(appCli.EthernetSwitch.PutEthernetSwitchIDPortPortID(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDParamFlags registers all flags needed to fill params
func registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDParamFlags(cmd *cobra.Command) error {
	if err := registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDPortIDParamFlags("", cmd); err != nil {
		return err
	}
	if err := registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDRequestParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	idDescription := `Required. Ethernet switch ID`

	var idFlagName string
	if cmdPrefix == "" {
		idFlagName = "id"
	} else {
		idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
	}

	var idFlagDefault string

	_ = cmd.PersistentFlags().String(idFlagName, idFlagDefault, idDescription)

	return nil
}
func registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDPortIDParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	portIdDescription := `Required. Ethernet switch port ID`

	var portIdFlagName string
	if cmdPrefix == "" {
		portIdFlagName = "portID"
	} else {
		portIdFlagName = fmt.Sprintf("%v.portID", cmdPrefix)
	}

	var portIdFlagDefault string

	_ = cmd.PersistentFlags().String(portIdFlagName, portIdFlagDefault, portIdDescription)

	return nil
}
func registerOperationEthernetSwitchPutEthernetSwitchIDPortPortIDRequestParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var requestFlagName string
	if cmdPrefix == "" {
		requestFlagName = "request"
	} else {
		requestFlagName = fmt.Sprintf("%v.request", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(requestFlagName, "", "Optional json string for [request]. Ethernet switch port fields")

	// add flags for body
	if err := registerModelDtosEthernetSwitchPortUpdateDtoFlags(0, "dtosEthernetSwitchPortUpdateDto", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationEthernetSwitchPutEthernetSwitchIDPortPortIDIDFlag(m *ethernet_switch.PutEthernetSwitchIDPortPortIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("id") {

		var idFlagName string
		if cmdPrefix == "" {
			idFlagName = "id"
		} else {
			idFlagName = fmt.Sprintf("%v.id", cmdPrefix)
		}

		idFlagValue, err := cmd.Flags().GetString(idFlagName)
		if err != nil {
			return err, false
		}
		m.ID = idFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchPutEthernetSwitchIDPortPortIDPortIDFlag(m *ethernet_switch.PutEthernetSwitchIDPortPortIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("portID") {

		var portIdFlagName string
		if cmdPrefix == "" {
			portIdFlagName = "portID"
		} else {
			portIdFlagName = fmt.Sprintf("%v.portID", cmdPrefix)
		}

		portIdFlagValue, err := cmd.Flags().GetString(portIdFlagName)
		if err != nil {
			return err, false
		}
		m.PortID = portIdFlagValue

	}
	return nil, retAdded
}
func retrieveOperationEthernetSwitchPutEthernetSwitchIDPortPortIDRequestFlag(m *ethernet_switch.PutEthernetSwitchIDPortPortIDParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("request") {
		// Read request string from cmd and unmarshal
		requestValueStr, err := cmd.Flags().GetString("request")
		if err != nil {
			return err, false
		}

		requestValue := models.DtosEthernetSwitchPortUpdateDto{}
		if err := json.Unmarshal([]byte(requestValueStr), &requestValue); err != nil {
			return fmt.Errorf("cannot unmarshal request string in models.DtosEthernetSwitchPortUpdateDto: %v", err), false
		}
		m.Request = &requestValue
	}
	requestValueModel := m.Request
	if swag.IsZero(requestValueModel) {
		requestValueModel = &models.DtosEthernetSwitchPortUpdateDto{}
	}
	err, added := retrieveModelDtosEthernetSwitchPortUpdateDtoFlags(0, requestValueModel, "dtosEthernetSwitchPortUpdateDto", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.Request = requestValueModel
	}
	if dryRun && debug {

		requestValueDebugBytes, err := json.Marshal(m.Request)
		if err != nil {
			return err, false
		}
		logDebugf("Request dry-run payload: %v", string(requestValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationEthernetSwitchPutEthernetSwitchIDPortPortIDResult parses request result and return the string content
func parseOperationEthernetSwitchPutEthernetSwitchIDPortPortIDResult(resp0 *ethernet_switch.PutEthernetSwitchIDPortPortIDOK, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*ethernet_switch.PutEthernetSwitchIDPortPortIDOK)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*ethernet_switch.PutEthernetSwitchIDPortPortIDBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning putEthernetSwitchIdPortPortIdNotFound is not supported

		// Non schema case: warning putEthernetSwitchIdPortPortIdInternalServerError is not supported

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
