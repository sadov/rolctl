// Code generated by go-swagger; DO NOT EDIT.

package dhcp

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dhcp API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dhcp API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteDhcpID(params *DeleteDhcpIDParams, opts ...ClientOption) (*DeleteDhcpIDNoContent, error)

	DeleteDhcpIDLeaseLeaseID(params *DeleteDhcpIDLeaseLeaseIDParams, opts ...ClientOption) (*DeleteDhcpIDLeaseLeaseIDNoContent, error)

	GetDhcp(params *GetDhcpParams, opts ...ClientOption) (*GetDhcpOK, error)

	GetDhcpID(params *GetDhcpIDParams, opts ...ClientOption) (*GetDhcpIDOK, error)

	GetDhcpIDLease(params *GetDhcpIDLeaseParams, opts ...ClientOption) (*GetDhcpIDLeaseOK, error)

	GetDhcpIDLeaseLeaseID(params *GetDhcpIDLeaseLeaseIDParams, opts ...ClientOption) (*GetDhcpIDLeaseLeaseIDOK, error)

	PostDhcp(params *PostDhcpParams, opts ...ClientOption) (*PostDhcpOK, error)

	PostDhcpIDLease(params *PostDhcpIDLeaseParams, opts ...ClientOption) (*PostDhcpIDLeaseOK, error)

	PutDhcpID(params *PutDhcpIDParams, opts ...ClientOption) (*PutDhcpIDOK, error)

	PutDhcpIDLeaseLeaseID(params *PutDhcpIDLeaseLeaseIDParams, opts ...ClientOption) (*PutDhcpIDLeaseLeaseIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteDhcpID deletes dhcp v4 server by id
*/
func (a *Client) DeleteDhcpID(params *DeleteDhcpIDParams, opts ...ClientOption) (*DeleteDhcpIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDhcpID",
		Method:             "DELETE",
		PathPattern:        "/dhcp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDhcpIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDhcpIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDhcpID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDhcpIDLeaseLeaseID deletes dhcp v4 lease by id
*/
func (a *Client) DeleteDhcpIDLeaseLeaseID(params *DeleteDhcpIDLeaseLeaseIDParams, opts ...ClientOption) (*DeleteDhcpIDLeaseLeaseIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDhcpIDLeaseLeaseIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteDhcpIDLeaseLeaseID",
		Method:             "DELETE",
		PathPattern:        "/dhcp/{id}/lease/{leaseID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDhcpIDLeaseLeaseIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDhcpIDLeaseLeaseIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteDhcpIDLeaseLeaseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDhcp gets paginated list of dhcp v4 servers
*/
func (a *Client) GetDhcp(params *GetDhcpParams, opts ...ClientOption) (*GetDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDhcp",
		Method:             "GET",
		PathPattern:        "/dhcp/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDhcpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDhcpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDhcp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDhcpID gets dhcp v4 server by id
*/
func (a *Client) GetDhcpID(params *GetDhcpIDParams, opts ...ClientOption) (*GetDhcpIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDhcpID",
		Method:             "GET",
		PathPattern:        "/dhcp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDhcpIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDhcpIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDhcpID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDhcpIDLease gets paginated list of dhcp v4 server leases
*/
func (a *Client) GetDhcpIDLease(params *GetDhcpIDLeaseParams, opts ...ClientOption) (*GetDhcpIDLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpIDLeaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDhcpIDLease",
		Method:             "GET",
		PathPattern:        "/dhcp/{id}/lease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDhcpIDLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDhcpIDLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDhcpIDLease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDhcpIDLeaseLeaseID gets dhcp v4 lease by id
*/
func (a *Client) GetDhcpIDLeaseLeaseID(params *GetDhcpIDLeaseLeaseIDParams, opts ...ClientOption) (*GetDhcpIDLeaseLeaseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDhcpIDLeaseLeaseIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDhcpIDLeaseLeaseID",
		Method:             "GET",
		PathPattern:        "/dhcp/{id}/lease/{leaseID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDhcpIDLeaseLeaseIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDhcpIDLeaseLeaseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetDhcpIDLeaseLeaseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDhcp creates d h c p v4 server
*/
func (a *Client) PostDhcp(params *PostDhcpParams, opts ...ClientOption) (*PostDhcpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDhcpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDhcp",
		Method:             "POST",
		PathPattern:        "/dhcp/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDhcpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDhcpOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDhcp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostDhcpIDLease creates d h c p v4 lease
*/
func (a *Client) PostDhcpIDLease(params *PostDhcpIDLeaseParams, opts ...ClientOption) (*PostDhcpIDLeaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDhcpIDLeaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostDhcpIDLease",
		Method:             "POST",
		PathPattern:        "/dhcp/{id}/lease",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostDhcpIDLeaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDhcpIDLeaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostDhcpIDLease: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutDhcpID updates d h c p v4 server by id
*/
func (a *Client) PutDhcpID(params *PutDhcpIDParams, opts ...ClientOption) (*PutDhcpIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDhcpIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDhcpID",
		Method:             "PUT",
		PathPattern:        "/dhcp/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDhcpIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDhcpIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDhcpID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutDhcpIDLeaseLeaseID updates d h c p v4 lease by id
*/
func (a *Client) PutDhcpIDLeaseLeaseID(params *PutDhcpIDLeaseLeaseIDParams, opts ...ClientOption) (*PutDhcpIDLeaseLeaseIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDhcpIDLeaseLeaseIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutDhcpIDLeaseLeaseID",
		Method:             "PUT",
		PathPattern:        "/dhcp/{id}/lease/{leaseID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutDhcpIDLeaseLeaseIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutDhcpIDLeaseLeaseIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutDhcpIDLeaseLeaseID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
