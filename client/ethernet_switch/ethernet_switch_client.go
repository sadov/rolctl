// Code generated by go-swagger; DO NOT EDIT.

package ethernet_switch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ethernet switch API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ethernet switch API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteEthernetSwitchID(params *DeleteEthernetSwitchIDParams, opts ...ClientOption) (*DeleteEthernetSwitchIDNoContent, error)

	DeleteEthernetSwitchIDPortPortID(params *DeleteEthernetSwitchIDPortPortIDParams, opts ...ClientOption) (*DeleteEthernetSwitchIDPortPortIDNoContent, error)

	DeleteEthernetSwitchIDVlanVlanUUID(params *DeleteEthernetSwitchIDVlanVlanUUIDParams, opts ...ClientOption) (*DeleteEthernetSwitchIDVlanVlanUUIDNoContent, error)

	GetEthernetSwitch(params *GetEthernetSwitchParams, opts ...ClientOption) (*GetEthernetSwitchOK, error)

	GetEthernetSwitchID(params *GetEthernetSwitchIDParams, opts ...ClientOption) (*GetEthernetSwitchIDOK, error)

	GetEthernetSwitchIDPort(params *GetEthernetSwitchIDPortParams, opts ...ClientOption) (*GetEthernetSwitchIDPortOK, error)

	GetEthernetSwitchIDPortPortID(params *GetEthernetSwitchIDPortPortIDParams, opts ...ClientOption) (*GetEthernetSwitchIDPortPortIDOK, error)

	GetEthernetSwitchIDVlan(params *GetEthernetSwitchIDVlanParams, opts ...ClientOption) (*GetEthernetSwitchIDVlanOK, error)

	GetEthernetSwitchIDVlanVlanUUID(params *GetEthernetSwitchIDVlanVlanUUIDParams, opts ...ClientOption) (*GetEthernetSwitchIDVlanVlanUUIDOK, error)

	GetEthernetSwitchModels(params *GetEthernetSwitchModelsParams, opts ...ClientOption) (*GetEthernetSwitchModelsOK, error)

	PostEthernetSwitch(params *PostEthernetSwitchParams, opts ...ClientOption) (*PostEthernetSwitchOK, error)

	PostEthernetSwitchIDPort(params *PostEthernetSwitchIDPortParams, opts ...ClientOption) (*PostEthernetSwitchIDPortOK, error)

	PostEthernetSwitchIDVlan(params *PostEthernetSwitchIDVlanParams, opts ...ClientOption) (*PostEthernetSwitchIDVlanOK, error)

	PutEthernetSwitchID(params *PutEthernetSwitchIDParams, opts ...ClientOption) (*PutEthernetSwitchIDOK, error)

	PutEthernetSwitchIDPortPortID(params *PutEthernetSwitchIDPortPortIDParams, opts ...ClientOption) (*PutEthernetSwitchIDPortPortIDOK, error)

	PutEthernetSwitchIDVlanVlanUUID(params *PutEthernetSwitchIDVlanVlanUUIDParams, opts ...ClientOption) (*PutEthernetSwitchIDVlanVlanUUIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteEthernetSwitchID deletes ethernet switch by id
*/
func (a *Client) DeleteEthernetSwitchID(params *DeleteEthernetSwitchIDParams, opts ...ClientOption) (*DeleteEthernetSwitchIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEthernetSwitchIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEthernetSwitchID",
		Method:             "DELETE",
		PathPattern:        "/ethernet-switch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEthernetSwitchIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEthernetSwitchIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEthernetSwitchID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEthernetSwitchIDPortPortID deletes ethernet switch port by id
*/
func (a *Client) DeleteEthernetSwitchIDPortPortID(params *DeleteEthernetSwitchIDPortPortIDParams, opts ...ClientOption) (*DeleteEthernetSwitchIDPortPortIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEthernetSwitchIDPortPortIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEthernetSwitchIDPortPortID",
		Method:             "DELETE",
		PathPattern:        "/ethernet-switch/{id}/port/{portID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEthernetSwitchIDPortPortIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEthernetSwitchIDPortPortIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEthernetSwitchIDPortPortID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEthernetSwitchIDVlanVlanUUID deletes ethernet switch v l a n by id
*/
func (a *Client) DeleteEthernetSwitchIDVlanVlanUUID(params *DeleteEthernetSwitchIDVlanVlanUUIDParams, opts ...ClientOption) (*DeleteEthernetSwitchIDVlanVlanUUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEthernetSwitchIDVlanVlanUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteEthernetSwitchIDVlanVlanUUID",
		Method:             "DELETE",
		PathPattern:        "/ethernet-switch/{id}/vlan/{vlanUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEthernetSwitchIDVlanVlanUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEthernetSwitchIDVlanVlanUUIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteEthernetSwitchIDVlanVlanUUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEthernetSwitch gets paginated list of switches
*/
func (a *Client) GetEthernetSwitch(params *GetEthernetSwitchParams, opts ...ClientOption) (*GetEthernetSwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEthernetSwitchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEthernetSwitch",
		Method:             "GET",
		PathPattern:        "/ethernet-switch/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEthernetSwitchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEthernetSwitchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEthernetSwitch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEthernetSwitchID gets ethernet switch by id
*/
func (a *Client) GetEthernetSwitchID(params *GetEthernetSwitchIDParams, opts ...ClientOption) (*GetEthernetSwitchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEthernetSwitchIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEthernetSwitchID",
		Method:             "GET",
		PathPattern:        "/ethernet-switch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEthernetSwitchIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEthernetSwitchIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEthernetSwitchID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEthernetSwitchIDPort gets paginated list of ethernet switch ports
*/
func (a *Client) GetEthernetSwitchIDPort(params *GetEthernetSwitchIDPortParams, opts ...ClientOption) (*GetEthernetSwitchIDPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEthernetSwitchIDPortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEthernetSwitchIDPort",
		Method:             "GET",
		PathPattern:        "/ethernet-switch/{id}/port/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEthernetSwitchIDPortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEthernetSwitchIDPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEthernetSwitchIDPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEthernetSwitchIDPortPortID gets ethernet switch port by id
*/
func (a *Client) GetEthernetSwitchIDPortPortID(params *GetEthernetSwitchIDPortPortIDParams, opts ...ClientOption) (*GetEthernetSwitchIDPortPortIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEthernetSwitchIDPortPortIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEthernetSwitchIDPortPortID",
		Method:             "GET",
		PathPattern:        "/ethernet-switch/{id}/port/{portID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEthernetSwitchIDPortPortIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEthernetSwitchIDPortPortIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEthernetSwitchIDPortPortID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEthernetSwitchIDVlan gets paginated list of switch v l a ns
*/
func (a *Client) GetEthernetSwitchIDVlan(params *GetEthernetSwitchIDVlanParams, opts ...ClientOption) (*GetEthernetSwitchIDVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEthernetSwitchIDVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEthernetSwitchIDVlan",
		Method:             "GET",
		PathPattern:        "/ethernet-switch/{id}/vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEthernetSwitchIDVlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEthernetSwitchIDVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEthernetSwitchIDVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEthernetSwitchIDVlanVlanUUID gets ethernet switch v l a n by id
*/
func (a *Client) GetEthernetSwitchIDVlanVlanUUID(params *GetEthernetSwitchIDVlanVlanUUIDParams, opts ...ClientOption) (*GetEthernetSwitchIDVlanVlanUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEthernetSwitchIDVlanVlanUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEthernetSwitchIDVlanVlanUUID",
		Method:             "GET",
		PathPattern:        "/ethernet-switch/{id}/vlan/{vlanUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEthernetSwitchIDVlanVlanUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEthernetSwitchIDVlanVlanUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEthernetSwitchIDVlanVlanUUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEthernetSwitchModels gets ethernet switch supported models
*/
func (a *Client) GetEthernetSwitchModels(params *GetEthernetSwitchModelsParams, opts ...ClientOption) (*GetEthernetSwitchModelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEthernetSwitchModelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEthernetSwitchModels",
		Method:             "GET",
		PathPattern:        "/ethernet-switch/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEthernetSwitchModelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEthernetSwitchModelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetEthernetSwitchModels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostEthernetSwitch creates new ethernet switch
*/
func (a *Client) PostEthernetSwitch(params *PostEthernetSwitchParams, opts ...ClientOption) (*PostEthernetSwitchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEthernetSwitchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostEthernetSwitch",
		Method:             "POST",
		PathPattern:        "/ethernet-switch/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEthernetSwitchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEthernetSwitchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEthernetSwitch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostEthernetSwitchIDPort creates new ethernet switch port
*/
func (a *Client) PostEthernetSwitchIDPort(params *PostEthernetSwitchIDPortParams, opts ...ClientOption) (*PostEthernetSwitchIDPortOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEthernetSwitchIDPortParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostEthernetSwitchIDPort",
		Method:             "POST",
		PathPattern:        "/ethernet-switch/{id}/port/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEthernetSwitchIDPortReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEthernetSwitchIDPortOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEthernetSwitchIDPort: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostEthernetSwitchIDVlan creates new ethernet switch v l a n
*/
func (a *Client) PostEthernetSwitchIDVlan(params *PostEthernetSwitchIDVlanParams, opts ...ClientOption) (*PostEthernetSwitchIDVlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostEthernetSwitchIDVlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostEthernetSwitchIDVlan",
		Method:             "POST",
		PathPattern:        "/ethernet-switch/{id}/vlan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostEthernetSwitchIDVlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostEthernetSwitchIDVlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostEthernetSwitchIDVlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutEthernetSwitchID updates ethernet switch by id
*/
func (a *Client) PutEthernetSwitchID(params *PutEthernetSwitchIDParams, opts ...ClientOption) (*PutEthernetSwitchIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEthernetSwitchIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutEthernetSwitchID",
		Method:             "PUT",
		PathPattern:        "/ethernet-switch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEthernetSwitchIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEthernetSwitchIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutEthernetSwitchID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutEthernetSwitchIDPortPortID updates ethernet switch port by id
*/
func (a *Client) PutEthernetSwitchIDPortPortID(params *PutEthernetSwitchIDPortPortIDParams, opts ...ClientOption) (*PutEthernetSwitchIDPortPortIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEthernetSwitchIDPortPortIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutEthernetSwitchIDPortPortID",
		Method:             "PUT",
		PathPattern:        "/ethernet-switch/{id}/port/{portID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEthernetSwitchIDPortPortIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEthernetSwitchIDPortPortIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutEthernetSwitchIDPortPortID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutEthernetSwitchIDVlanVlanUUID updates ethernet switch v l a n by id
*/
func (a *Client) PutEthernetSwitchIDVlanVlanUUID(params *PutEthernetSwitchIDVlanVlanUUIDParams, opts ...ClientOption) (*PutEthernetSwitchIDVlanVlanUUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutEthernetSwitchIDVlanVlanUUIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutEthernetSwitchIDVlanVlanUUID",
		Method:             "PUT",
		PathPattern:        "/ethernet-switch/{id}/vlan/{vlanUUID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutEthernetSwitchIDVlanVlanUUIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutEthernetSwitchIDVlanVlanUUIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutEthernetSwitchIDVlanVlanUUID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
