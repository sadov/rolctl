// Code generated by go-swagger; DO NOT EDIT.

package ethernet_switch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/sadov/rolctl/models"
)

// PutEthernetSwitchIDPortPortIDReader is a Reader for the PutEthernetSwitchIDPortPortID structure.
type PutEthernetSwitchIDPortPortIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutEthernetSwitchIDPortPortIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutEthernetSwitchIDPortPortIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutEthernetSwitchIDPortPortIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutEthernetSwitchIDPortPortIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutEthernetSwitchIDPortPortIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutEthernetSwitchIDPortPortIDOK creates a PutEthernetSwitchIDPortPortIDOK with default headers values
func NewPutEthernetSwitchIDPortPortIDOK() *PutEthernetSwitchIDPortPortIDOK {
	return &PutEthernetSwitchIDPortPortIDOK{}
}

/*
PutEthernetSwitchIDPortPortIDOK describes a response with status code 200, with default header values.

OK
*/
type PutEthernetSwitchIDPortPortIDOK struct {
	Payload *models.DtosEthernetSwitchPortDto
}

// IsSuccess returns true when this put ethernet switch Id port port Id o k response has a 2xx status code
func (o *PutEthernetSwitchIDPortPortIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put ethernet switch Id port port Id o k response has a 3xx status code
func (o *PutEthernetSwitchIDPortPortIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ethernet switch Id port port Id o k response has a 4xx status code
func (o *PutEthernetSwitchIDPortPortIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put ethernet switch Id port port Id o k response has a 5xx status code
func (o *PutEthernetSwitchIDPortPortIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put ethernet switch Id port port Id o k response a status code equal to that given
func (o *PutEthernetSwitchIDPortPortIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PutEthernetSwitchIDPortPortIDOK) Error() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdOK  %+v", 200, o.Payload)
}

func (o *PutEthernetSwitchIDPortPortIDOK) String() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdOK  %+v", 200, o.Payload)
}

func (o *PutEthernetSwitchIDPortPortIDOK) GetPayload() *models.DtosEthernetSwitchPortDto {
	return o.Payload
}

func (o *PutEthernetSwitchIDPortPortIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DtosEthernetSwitchPortDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEthernetSwitchIDPortPortIDBadRequest creates a PutEthernetSwitchIDPortPortIDBadRequest with default headers values
func NewPutEthernetSwitchIDPortPortIDBadRequest() *PutEthernetSwitchIDPortPortIDBadRequest {
	return &PutEthernetSwitchIDPortPortIDBadRequest{}
}

/*
PutEthernetSwitchIDPortPortIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PutEthernetSwitchIDPortPortIDBadRequest struct {
	Payload *models.DtosValidationErrorDto
}

// IsSuccess returns true when this put ethernet switch Id port port Id bad request response has a 2xx status code
func (o *PutEthernetSwitchIDPortPortIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put ethernet switch Id port port Id bad request response has a 3xx status code
func (o *PutEthernetSwitchIDPortPortIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ethernet switch Id port port Id bad request response has a 4xx status code
func (o *PutEthernetSwitchIDPortPortIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this put ethernet switch Id port port Id bad request response has a 5xx status code
func (o *PutEthernetSwitchIDPortPortIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this put ethernet switch Id port port Id bad request response a status code equal to that given
func (o *PutEthernetSwitchIDPortPortIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PutEthernetSwitchIDPortPortIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutEthernetSwitchIDPortPortIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdBadRequest  %+v", 400, o.Payload)
}

func (o *PutEthernetSwitchIDPortPortIDBadRequest) GetPayload() *models.DtosValidationErrorDto {
	return o.Payload
}

func (o *PutEthernetSwitchIDPortPortIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.DtosValidationErrorDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutEthernetSwitchIDPortPortIDNotFound creates a PutEthernetSwitchIDPortPortIDNotFound with default headers values
func NewPutEthernetSwitchIDPortPortIDNotFound() *PutEthernetSwitchIDPortPortIDNotFound {
	return &PutEthernetSwitchIDPortPortIDNotFound{}
}

/*
PutEthernetSwitchIDPortPortIDNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PutEthernetSwitchIDPortPortIDNotFound struct {
}

// IsSuccess returns true when this put ethernet switch Id port port Id not found response has a 2xx status code
func (o *PutEthernetSwitchIDPortPortIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put ethernet switch Id port port Id not found response has a 3xx status code
func (o *PutEthernetSwitchIDPortPortIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ethernet switch Id port port Id not found response has a 4xx status code
func (o *PutEthernetSwitchIDPortPortIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put ethernet switch Id port port Id not found response has a 5xx status code
func (o *PutEthernetSwitchIDPortPortIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put ethernet switch Id port port Id not found response a status code equal to that given
func (o *PutEthernetSwitchIDPortPortIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PutEthernetSwitchIDPortPortIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdNotFound ", 404)
}

func (o *PutEthernetSwitchIDPortPortIDNotFound) String() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdNotFound ", 404)
}

func (o *PutEthernetSwitchIDPortPortIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutEthernetSwitchIDPortPortIDInternalServerError creates a PutEthernetSwitchIDPortPortIDInternalServerError with default headers values
func NewPutEthernetSwitchIDPortPortIDInternalServerError() *PutEthernetSwitchIDPortPortIDInternalServerError {
	return &PutEthernetSwitchIDPortPortIDInternalServerError{}
}

/*
PutEthernetSwitchIDPortPortIDInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PutEthernetSwitchIDPortPortIDInternalServerError struct {
}

// IsSuccess returns true when this put ethernet switch Id port port Id internal server error response has a 2xx status code
func (o *PutEthernetSwitchIDPortPortIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put ethernet switch Id port port Id internal server error response has a 3xx status code
func (o *PutEthernetSwitchIDPortPortIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put ethernet switch Id port port Id internal server error response has a 4xx status code
func (o *PutEthernetSwitchIDPortPortIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this put ethernet switch Id port port Id internal server error response has a 5xx status code
func (o *PutEthernetSwitchIDPortPortIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this put ethernet switch Id port port Id internal server error response a status code equal to that given
func (o *PutEthernetSwitchIDPortPortIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PutEthernetSwitchIDPortPortIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdInternalServerError ", 500)
}

func (o *PutEthernetSwitchIDPortPortIDInternalServerError) String() string {
	return fmt.Sprintf("[PUT /ethernet-switch/{id}/port/{portID}][%d] putEthernetSwitchIdPortPortIdInternalServerError ", 500)
}

func (o *PutEthernetSwitchIDPortPortIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
