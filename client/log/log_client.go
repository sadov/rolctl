// Code generated by go-swagger; DO NOT EDIT.

package log

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new log API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for log API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetLogApp(params *GetLogAppParams, opts ...ClientOption) (*GetLogAppOK, error)

	GetLogAppID(params *GetLogAppIDParams, opts ...ClientOption) (*GetLogAppIDOK, error)

	GetLogHTTP(params *GetLogHTTPParams, opts ...ClientOption) (*GetLogHTTPOK, error)

	GetLogHTTPID(params *GetLogHTTPIDParams, opts ...ClientOption) (*GetLogHTTPIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetLogApp gets paginated list of app logs
*/
func (a *Client) GetLogApp(params *GetLogAppParams, opts ...ClientOption) (*GetLogAppOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogAppParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogApp",
		Method:             "GET",
		PathPattern:        "/log/app/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogAppReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogAppOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLogApp: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLogAppID gets http app by id
*/
func (a *Client) GetLogAppID(params *GetLogAppIDParams, opts ...ClientOption) (*GetLogAppIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogAppIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogAppID",
		Method:             "GET",
		PathPattern:        "/log/app/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogAppIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogAppIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLogAppID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLogHTTP gets paginated list of http logs
*/
func (a *Client) GetLogHTTP(params *GetLogHTTPParams, opts ...ClientOption) (*GetLogHTTPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogHTTPParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogHTTP",
		Method:             "GET",
		PathPattern:        "/log/http/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogHTTPReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogHTTPOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLogHTTP: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLogHTTPID gets http log by id
*/
func (a *Client) GetLogHTTPID(params *GetLogHTTPIDParams, opts ...ClientOption) (*GetLogHTTPIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogHTTPIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogHTTPID",
		Method:             "GET",
		PathPattern:        "/log/http/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogHTTPIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogHTTPIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetLogHTTPID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
