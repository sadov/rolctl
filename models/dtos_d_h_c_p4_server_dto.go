// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtosDHCP4ServerDto dtos d h c p4 server dto
//
// swagger:model dtos.DHCP4ServerDto
type DtosDHCP4ServerDto struct {

	// CreatedAt - entity create time
	CreatedAt string `json:"createdAt,omitempty"`

	// DNS servers, separated by ";"
	DNS string `json:"dns,omitempty"`

	// Enabled server or no
	Enabled bool `json:"enabled,omitempty"`

	// Gateway in ipv4 format
	Gateway string `json:"gateway,omitempty"`

	// ID - unique identifier
	ID string `json:"id,omitempty"`

	// Interface name
	Interface string `json:"interface,omitempty"`

	// LeaseTime for dhcp v4 server leases
	LeaseTime int64 `json:"leaseTime,omitempty"`

	// Mask for dhcp leases, for example: "255.255.255.0"
	Mask string `json:"mask,omitempty"`

	// NTP IP address or dns name of NTP server
	Ntp string `json:"ntp,omitempty"`

	// Port of DHCP server
	Port int64 `json:"port,omitempty"`

	// Range of ip's for this dhcp v4 server, separated by "-", for example: "10.10.10.2-10.10.10.22"
	Range string `json:"range,omitempty"`

	// ServerID is a server_id dhcp option. Correct format is ipv4.
	ServerID string `json:"serverID,omitempty"`

	// State current state of dhcp v4 server
	State string `json:"state,omitempty"`

	// UpdatedAt - entity update time
	UpdatedAt string `json:"updatedAt,omitempty"`
}

// Validate validates this dtos d h c p4 server dto
func (m *DtosDHCP4ServerDto) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this dtos d h c p4 server dto based on context it is used
func (m *DtosDHCP4ServerDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DtosDHCP4ServerDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtosDHCP4ServerDto) UnmarshalBinary(b []byte) error {
	var res DtosDHCP4ServerDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
