// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DtosDeviceTemplateDto dtos device template dto
//
// swagger:model dtos.DeviceTemplateDto
type DtosDeviceTemplateDto struct {

	// Control describes how we control the device
	Control *DtosDeviceTemplateControlDto `json:"control,omitempty"`

	// CPUCount count of cpus
	Cpucount int64 `json:"cpucount,omitempty"`

	// CPUModel model of cpu
	Cpumodel string `json:"cpumodel,omitempty"`

	// Description template description
	Description string `json:"description,omitempty"`

	// DiscBootStages slice of boot stage templates for disk boot
	DiscBootStages []*DtosDeviceTemplateBootStageDto `json:"discBootStages"`

	// Manufacturer device manufacturer
	Manufacturer string `json:"manufacturer,omitempty"`

	// Model device model
	Model string `json:"model,omitempty"`

	// Name template name
	Name string `json:"name,omitempty"`

	// NetBootStages slice of boot stage templates for net boot
	NetBootStages []*DtosDeviceTemplateBootStageDto `json:"netBootStages"`

	// NetworkInterfaces slice of device network interfaces
	NetworkInterfaces []*DtosDeviceTemplateNetworkDto `json:"networkInterfaces"`

	// RAM the amount of RAM in GB
	RAM int64 `json:"ram,omitempty"`

	// USBBootStages slice of boot stage templates for usb boot
	UsbbootStages []*DtosDeviceTemplateBootStageDto `json:"usbbootStages"`
}

// Validate validates this dtos device template dto
func (m *DtosDeviceTemplateDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscBootStages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetBootStages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkInterfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsbbootStages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtosDeviceTemplateDto) validateControl(formats strfmt.Registry) error {
	if swag.IsZero(m.Control) { // not required
		return nil
	}

	if m.Control != nil {
		if err := m.Control.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("control")
			}
			return err
		}
	}

	return nil
}

func (m *DtosDeviceTemplateDto) validateDiscBootStages(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscBootStages) { // not required
		return nil
	}

	for i := 0; i < len(m.DiscBootStages); i++ {
		if swag.IsZero(m.DiscBootStages[i]) { // not required
			continue
		}

		if m.DiscBootStages[i] != nil {
			if err := m.DiscBootStages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discBootStages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("discBootStages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtosDeviceTemplateDto) validateNetBootStages(formats strfmt.Registry) error {
	if swag.IsZero(m.NetBootStages) { // not required
		return nil
	}

	for i := 0; i < len(m.NetBootStages); i++ {
		if swag.IsZero(m.NetBootStages[i]) { // not required
			continue
		}

		if m.NetBootStages[i] != nil {
			if err := m.NetBootStages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netBootStages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netBootStages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtosDeviceTemplateDto) validateNetworkInterfaces(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInterfaces) { // not required
		return nil
	}

	for i := 0; i < len(m.NetworkInterfaces); i++ {
		if swag.IsZero(m.NetworkInterfaces[i]) { // not required
			continue
		}

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtosDeviceTemplateDto) validateUsbbootStages(formats strfmt.Registry) error {
	if swag.IsZero(m.UsbbootStages) { // not required
		return nil
	}

	for i := 0; i < len(m.UsbbootStages); i++ {
		if swag.IsZero(m.UsbbootStages[i]) { // not required
			continue
		}

		if m.UsbbootStages[i] != nil {
			if err := m.UsbbootStages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("usbbootStages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("usbbootStages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dtos device template dto based on the context it is used
func (m *DtosDeviceTemplateDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateControl(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscBootStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetBootStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkInterfaces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsbbootStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DtosDeviceTemplateDto) contextValidateControl(ctx context.Context, formats strfmt.Registry) error {

	if m.Control != nil {
		if err := m.Control.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("control")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("control")
			}
			return err
		}
	}

	return nil
}

func (m *DtosDeviceTemplateDto) contextValidateDiscBootStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DiscBootStages); i++ {

		if m.DiscBootStages[i] != nil {
			if err := m.DiscBootStages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discBootStages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("discBootStages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtosDeviceTemplateDto) contextValidateNetBootStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetBootStages); i++ {

		if m.NetBootStages[i] != nil {
			if err := m.NetBootStages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("netBootStages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("netBootStages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtosDeviceTemplateDto) contextValidateNetworkInterfaces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NetworkInterfaces); i++ {

		if m.NetworkInterfaces[i] != nil {
			if err := m.NetworkInterfaces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("networkInterfaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DtosDeviceTemplateDto) contextValidateUsbbootStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UsbbootStages); i++ {

		if m.UsbbootStages[i] != nil {
			if err := m.UsbbootStages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("usbbootStages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("usbbootStages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DtosDeviceTemplateDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DtosDeviceTemplateDto) UnmarshalBinary(b []byte) error {
	var res DtosDeviceTemplateDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
